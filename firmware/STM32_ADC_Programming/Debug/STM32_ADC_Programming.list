
STM32_ADC_Programming.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003c38  08003c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c78  08003c78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c78  08003c78  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c78  08003c78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c78  08003c78  00013c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c7c  08003c7c  00013c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08003c8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003c8c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a1b8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a3d  00000000  00000000  0002a237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ba  00000000  00000000  0002c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026131  00000000  00000000  0002ce72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae20  00000000  00000000  00052fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1d19  00000000  00000000  0005ddc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029c0  00000000  00000000  0014fadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  0015249c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c20 	.word	0x08003c20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003c20 	.word	0x08003c20

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa80 	bl	80006d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f832 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f90a 	bl	80003ec <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f880 	bl	80002dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80001dc:	217f      	movs	r1, #127	; 0x7f
 80001de:	4813      	ldr	r0, [pc, #76]	; (800022c <main+0x64>)
 80001e0:	f001 fe52 	bl	8001e88 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // start ADC, poll for conversion and get the sampled data
	  HAL_Delay(1000);
 80001e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e8:	f000 faee 	bl	80007c8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80001ec:	480f      	ldr	r0, [pc, #60]	; (800022c <main+0x64>)
 80001ee:	f000 fe91 	bl	8000f14 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80001f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001f6:	480d      	ldr	r0, [pc, #52]	; (800022c <main+0x64>)
 80001f8:	f000 ff7a 	bl	80010f0 <HAL_ADC_PollForConversion>
	  channel1 = HAL_ADC_GetValue(&hadc1);
 80001fc:	480b      	ldr	r0, [pc, #44]	; (800022c <main+0x64>)
 80001fe:	f001 f84f 	bl	80012a0 <HAL_ADC_GetValue>
 8000202:	4603      	mov	r3, r0
 8000204:	b29a      	uxth	r2, r3
 8000206:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <main+0x68>)
 8000208:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800020a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800020e:	4807      	ldr	r0, [pc, #28]	; (800022c <main+0x64>)
 8000210:	f000 ff6e 	bl	80010f0 <HAL_ADC_PollForConversion>
	  channel2 = HAL_ADC_GetValue(&hadc1);
 8000214:	4805      	ldr	r0, [pc, #20]	; (800022c <main+0x64>)
 8000216:	f001 f843 	bl	80012a0 <HAL_ADC_GetValue>
 800021a:	4603      	mov	r3, r0
 800021c:	b29a      	uxth	r2, r3
 800021e:	4b05      	ldr	r3, [pc, #20]	; (8000234 <main+0x6c>)
 8000220:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000222:	4802      	ldr	r0, [pc, #8]	; (800022c <main+0x64>)
 8000224:	f000 ff30 	bl	8001088 <HAL_ADC_Stop>
	  HAL_Delay(1000);
 8000228:	e7dc      	b.n	80001e4 <main+0x1c>
 800022a:	bf00      	nop
 800022c:	20000028 	.word	0x20000028
 8000230:	2000008c 	.word	0x2000008c
 8000234:	2000008e 	.word	0x2000008e

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b096      	sub	sp, #88	; 0x58
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0314 	add.w	r3, r7, #20
 8000242:	2244      	movs	r2, #68	; 0x44
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f003 fcbe 	bl	8003bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	463b      	mov	r3, r7
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800025a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800025e:	f002 f9d9 	bl	8002614 <HAL_PWREx_ControlVoltageScaling>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000268:	f000 f938 	bl	80004dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026c:	2302      	movs	r3, #2
 800026e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000274:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	2310      	movs	r3, #16
 8000278:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800027e:	2302      	movs	r3, #2
 8000280:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000282:	2301      	movs	r3, #1
 8000284:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000286:	230a      	movs	r3, #10
 8000288:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800028a:	2307      	movs	r3, #7
 800028c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800028e:	2302      	movs	r3, #2
 8000290:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000292:	2302      	movs	r3, #2
 8000294:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fa10 	bl	80026c0 <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002a6:	f000 f919 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ae:	2303      	movs	r3, #3
 80002b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002be:	463b      	mov	r3, r7
 80002c0:	2104      	movs	r1, #4
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 fdd8 	bl	8002e78 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ce:	f000 f905 	bl	80004dc <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3758      	adds	r7, #88	; 0x58
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	; 0x28
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002e2:	f107 031c 	add.w	r3, r7, #28
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
 80002fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fe:	4b37      	ldr	r3, [pc, #220]	; (80003dc <MX_ADC1_Init+0x100>)
 8000300:	4a37      	ldr	r2, [pc, #220]	; (80003e0 <MX_ADC1_Init+0x104>)
 8000302:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000304:	4b35      	ldr	r3, [pc, #212]	; (80003dc <MX_ADC1_Init+0x100>)
 8000306:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 800030a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800030c:	4b33      	ldr	r3, [pc, #204]	; (80003dc <MX_ADC1_Init+0x100>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000312:	4b32      	ldr	r3, [pc, #200]	; (80003dc <MX_ADC1_Init+0x100>)
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000318:	4b30      	ldr	r3, [pc, #192]	; (80003dc <MX_ADC1_Init+0x100>)
 800031a:	2201      	movs	r2, #1
 800031c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800031e:	4b2f      	ldr	r3, [pc, #188]	; (80003dc <MX_ADC1_Init+0x100>)
 8000320:	2204      	movs	r2, #4
 8000322:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000324:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <MX_ADC1_Init+0x100>)
 8000326:	2200      	movs	r2, #0
 8000328:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800032a:	4b2c      	ldr	r3, [pc, #176]	; (80003dc <MX_ADC1_Init+0x100>)
 800032c:	2200      	movs	r2, #0
 800032e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000330:	4b2a      	ldr	r3, [pc, #168]	; (80003dc <MX_ADC1_Init+0x100>)
 8000332:	2202      	movs	r2, #2
 8000334:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000336:	4b29      	ldr	r3, [pc, #164]	; (80003dc <MX_ADC1_Init+0x100>)
 8000338:	2200      	movs	r2, #0
 800033a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033e:	4b27      	ldr	r3, [pc, #156]	; (80003dc <MX_ADC1_Init+0x100>)
 8000340:	2200      	movs	r2, #0
 8000342:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000344:	4b25      	ldr	r3, [pc, #148]	; (80003dc <MX_ADC1_Init+0x100>)
 8000346:	2200      	movs	r2, #0
 8000348:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800034a:	4b24      	ldr	r3, [pc, #144]	; (80003dc <MX_ADC1_Init+0x100>)
 800034c:	2200      	movs	r2, #0
 800034e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000352:	4b22      	ldr	r3, [pc, #136]	; (80003dc <MX_ADC1_Init+0x100>)
 8000354:	2200      	movs	r2, #0
 8000356:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000358:	4b20      	ldr	r3, [pc, #128]	; (80003dc <MX_ADC1_Init+0x100>)
 800035a:	2200      	movs	r2, #0
 800035c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000360:	481e      	ldr	r0, [pc, #120]	; (80003dc <MX_ADC1_Init+0x100>)
 8000362:	f000 fc87 	bl	8000c74 <HAL_ADC_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800036c:	f000 f8b6 	bl	80004dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000370:	2300      	movs	r3, #0
 8000372:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000374:	f107 031c 	add.w	r3, r7, #28
 8000378:	4619      	mov	r1, r3
 800037a:	4818      	ldr	r0, [pc, #96]	; (80003dc <MX_ADC1_Init+0x100>)
 800037c:	f001 fde4 	bl	8001f48 <HAL_ADCEx_MultiModeConfigChannel>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000386:	f000 f8a9 	bl	80004dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <MX_ADC1_Init+0x108>)
 800038c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800038e:	2306      	movs	r3, #6
 8000390:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000392:	2302      	movs	r3, #2
 8000394:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000396:	237f      	movs	r3, #127	; 0x7f
 8000398:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800039a:	2304      	movs	r3, #4
 800039c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4619      	mov	r1, r3
 80003a6:	480d      	ldr	r0, [pc, #52]	; (80003dc <MX_ADC1_Init+0x100>)
 80003a8:	f000 ff88 	bl	80012bc <HAL_ADC_ConfigChannel>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80003b2:	f000 f893 	bl	80004dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_ADC1_Init+0x10c>)
 80003b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003ba:	230c      	movs	r3, #12
 80003bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4619      	mov	r1, r3
 80003c2:	4806      	ldr	r0, [pc, #24]	; (80003dc <MX_ADC1_Init+0x100>)
 80003c4:	f000 ff7a 	bl	80012bc <HAL_ADC_ConfigChannel>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80003ce:	f000 f885 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	3728      	adds	r7, #40	; 0x28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000028 	.word	0x20000028
 80003e0:	50040000 	.word	0x50040000
 80003e4:	04300002 	.word	0x04300002
 80003e8:	08600004 	.word	0x08600004

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08a      	sub	sp, #40	; 0x28
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0314 	add.w	r3, r7, #20
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000402:	4b34      	ldr	r3, [pc, #208]	; (80004d4 <MX_GPIO_Init+0xe8>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a33      	ldr	r2, [pc, #204]	; (80004d4 <MX_GPIO_Init+0xe8>)
 8000408:	f043 0304 	orr.w	r3, r3, #4
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b31      	ldr	r3, [pc, #196]	; (80004d4 <MX_GPIO_Init+0xe8>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0304 	and.w	r3, r3, #4
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800041a:	4b2e      	ldr	r3, [pc, #184]	; (80004d4 <MX_GPIO_Init+0xe8>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	4a2d      	ldr	r2, [pc, #180]	; (80004d4 <MX_GPIO_Init+0xe8>)
 8000420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000426:	4b2b      	ldr	r3, [pc, #172]	; (80004d4 <MX_GPIO_Init+0xe8>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b28      	ldr	r3, [pc, #160]	; (80004d4 <MX_GPIO_Init+0xe8>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	4a27      	ldr	r2, [pc, #156]	; (80004d4 <MX_GPIO_Init+0xe8>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043e:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <MX_GPIO_Init+0xe8>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <MX_GPIO_Init+0xe8>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	4a21      	ldr	r2, [pc, #132]	; (80004d4 <MX_GPIO_Init+0xe8>)
 8000450:	f043 0302 	orr.w	r3, r3, #2
 8000454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000456:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <MX_GPIO_Init+0xe8>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	f003 0302 	and.w	r3, r3, #2
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2120      	movs	r1, #32
 8000466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046a:	f002 f8ad 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800046e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000474:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	4619      	mov	r1, r3
 8000484:	4814      	ldr	r0, [pc, #80]	; (80004d8 <MX_GPIO_Init+0xec>)
 8000486:	f001 fef5 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800048a:	230c      	movs	r3, #12
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048e:	2302      	movs	r3, #2
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000496:	2303      	movs	r3, #3
 8000498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800049a:	2307      	movs	r3, #7
 800049c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	4619      	mov	r1, r3
 80004a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a8:	f001 fee4 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004ac:	2320      	movs	r3, #32
 80004ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b0:	2301      	movs	r3, #1
 80004b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b8:	2300      	movs	r3, #0
 80004ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	4619      	mov	r1, r3
 80004c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c6:	f001 fed5 	bl	8002274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ca:	bf00      	nop
 80004cc:	3728      	adds	r7, #40	; 0x28
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	48000800 	.word	0x48000800

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <Error_Handler+0x8>
	...

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <HAL_MspInit+0x44>)
 80004f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <HAL_MspInit+0x44>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6613      	str	r3, [r2, #96]	; 0x60
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <HAL_MspInit+0x44>)
 80004fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <HAL_MspInit+0x44>)
 8000508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <HAL_MspInit+0x44>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	6593      	str	r3, [r2, #88]	; 0x58
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <HAL_MspInit+0x44>)
 8000514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0ac      	sub	sp, #176	; 0xb0
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	2288      	movs	r2, #136	; 0x88
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f003 fb39 	bl	8003bc8 <memset>
  if(hadc->Instance==ADC1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <HAL_ADC_MspInit+0xc8>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d146      	bne.n	80005ee <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000560:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000564:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000566:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800056a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000572:	2301      	movs	r3, #1
 8000574:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000576:	2308      	movs	r3, #8
 8000578:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800057a:	2307      	movs	r3, #7
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000586:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800058a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4618      	mov	r0, r3
 8000592:	f002 fe5d 	bl	8003250 <HAL_RCCEx_PeriphCLKConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800059c:	f7ff ff9e 	bl	80004dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <HAL_ADC_MspInit+0xcc>)
 80005a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a4:	4a15      	ldr	r2, [pc, #84]	; (80005fc <HAL_ADC_MspInit+0xcc>)
 80005a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <HAL_ADC_MspInit+0xcc>)
 80005ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <HAL_ADC_MspInit+0xcc>)
 80005ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005bc:	4a0f      	ldr	r2, [pc, #60]	; (80005fc <HAL_ADC_MspInit+0xcc>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <HAL_ADC_MspInit+0xcc>)
 80005c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005d0:	2303      	movs	r3, #3
 80005d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005d6:	230b      	movs	r3, #11
 80005d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005e6:	4619      	mov	r1, r3
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <HAL_ADC_MspInit+0xd0>)
 80005ea:	f001 fe43 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005ee:	bf00      	nop
 80005f0:	37b0      	adds	r7, #176	; 0xb0
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	50040000 	.word	0x50040000
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000800 	.word	0x48000800

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <NMI_Handler+0x4>

0800060a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <MemManage_Handler+0x4>

08000616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <BusFault_Handler+0x4>

0800061c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <UsageFault_Handler+0x4>

08000622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000650:	f000 f89a 	bl	8000788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <SystemInit+0x20>)
 800065e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <SystemInit+0x20>)
 8000664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800067c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000680:	f7ff ffea 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000686:	490d      	ldr	r1, [pc, #52]	; (80006bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <LoopForever+0xe>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800069c:	4c0a      	ldr	r4, [pc, #40]	; (80006c8 <LoopForever+0x16>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006aa:	f003 fa95 	bl	8003bd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ae:	f7ff fd8b 	bl	80001c8 <main>

080006b2 <LoopForever>:

LoopForever:
    b LoopForever
 80006b2:	e7fe      	b.n	80006b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c0:	08003c80 	.word	0x08003c80
  ldr r2, =_sbss
 80006c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c8:	20000094 	.word	0x20000094

080006cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC1_2_IRQHandler>
	...

080006d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <HAL_Init+0x3c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a0b      	ldr	r2, [pc, #44]	; (800070c <HAL_Init+0x3c>)
 80006e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e6:	2003      	movs	r0, #3
 80006e8:	f001 fd90 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 f80f 	bl	8000710 <HAL_InitTick>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006f8:	2301      	movs	r3, #1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	e001      	b.n	8000702 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006fe:	f7ff fef3 	bl	80004e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000702:	79fb      	ldrb	r3, [r7, #7]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <HAL_InitTick+0x6c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d023      	beq.n	800076c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <HAL_InitTick+0x70>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_InitTick+0x6c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000732:	fbb3 f3f1 	udiv	r3, r3, r1
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fd8d 	bl	800225a <HAL_SYSTICK_Config>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10f      	bne.n	8000766 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d809      	bhi.n	8000760 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074c:	2200      	movs	r2, #0
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f001 fd65 	bl	8002222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000758:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <HAL_InitTick+0x74>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	e007      	b.n	8000770 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e004      	b.n	8000770 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	e001      	b.n	8000770 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800076c:	2301      	movs	r3, #1
 800076e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000008 	.word	0x20000008
 8000780:	20000000 	.word	0x20000000
 8000784:	20000004 	.word	0x20000004

08000788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_IncTick+0x20>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_IncTick+0x24>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_IncTick+0x24>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000090 	.word	0x20000090

080007b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <HAL_GetTick+0x14>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000090 	.word	0x20000090

080007c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d0:	f7ff ffee 	bl	80007b0 <HAL_GetTick>
 80007d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e0:	d005      	beq.n	80007ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_Delay+0x44>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ee:	bf00      	nop
 80007f0:	f7ff ffde 	bl	80007b0 <HAL_GetTick>
 80007f4:	4602      	mov	r2, r0
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d8f7      	bhi.n	80007f0 <HAL_Delay+0x28>
  {
  }
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000008 	.word	0x20000008

08000810 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	431a      	orrs	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	609a      	str	r2, [r3, #8]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	431a      	orrs	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	609a      	str	r2, [r3, #8]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3360      	adds	r3, #96	; 0x60
 800088a:	461a      	mov	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <LL_ADC_SetOffset+0x44>)
 800089a:	4013      	ands	r3, r2
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	430a      	orrs	r2, r1
 80008a6:	4313      	orrs	r3, r2
 80008a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80008b0:	bf00      	nop
 80008b2:	371c      	adds	r7, #28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	03fff000 	.word	0x03fff000

080008c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3360      	adds	r3, #96	; 0x60
 80008ce:	461a      	mov	r2, r3
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3360      	adds	r3, #96	; 0x60
 80008fc:	461a      	mov	r2, r3
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	431a      	orrs	r2, r3
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000916:	bf00      	nop
 8000918:	371c      	adds	r7, #28
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000936:	2301      	movs	r3, #1
 8000938:	e000      	b.n	800093c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000948:	b480      	push	{r7}
 800094a:	b087      	sub	sp, #28
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3330      	adds	r3, #48	; 0x30
 8000958:	461a      	mov	r2, r3
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	f003 030c 	and.w	r3, r3, #12
 8000964:	4413      	add	r3, r2
 8000966:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	f003 031f 	and.w	r3, r3, #31
 8000972:	211f      	movs	r1, #31
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	401a      	ands	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	0e9b      	lsrs	r3, r3, #26
 8000980:	f003 011f 	and.w	r1, r3, #31
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	431a      	orrs	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000994:	bf00      	nop
 8000996:	371c      	adds	r7, #28
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3314      	adds	r3, #20
 80009b0:	461a      	mov	r2, r3
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	0e5b      	lsrs	r3, r3, #25
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	4413      	add	r3, r2
 80009be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	0d1b      	lsrs	r3, r3, #20
 80009c8:	f003 031f 	and.w	r3, r3, #31
 80009cc:	2107      	movs	r1, #7
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	401a      	ands	r2, r3
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	0d1b      	lsrs	r3, r3, #20
 80009da:	f003 031f 	and.w	r3, r3, #31
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	fa01 f303 	lsl.w	r3, r1, r3
 80009e4:	431a      	orrs	r2, r3
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80009ea:	bf00      	nop
 80009ec:	371c      	adds	r7, #28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a10:	43db      	mvns	r3, r3
 8000a12:	401a      	ands	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0318 	and.w	r3, r3, #24
 8000a1a:	4908      	ldr	r1, [pc, #32]	; (8000a3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a1c:	40d9      	lsrs	r1, r3
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	400b      	ands	r3, r1
 8000a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a26:	431a      	orrs	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	0007ffff 	.word	0x0007ffff

08000a40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f003 031f 	and.w	r3, r3, #31
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000a88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	6093      	str	r3, [r2, #8]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ab0:	d101      	bne.n	8000ab6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e000      	b.n	8000ab8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ad4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ad8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b00:	d101      	bne.n	8000b06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b02:	2301      	movs	r3, #1
 8000b04:	e000      	b.n	8000b08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b28:	f043 0201 	orr.w	r2, r3, #1
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b50:	f043 0202 	orr.w	r2, r3, #2
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d101      	bne.n	8000b7c <LL_ADC_IsEnabled+0x18>
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e000      	b.n	8000b7e <LL_ADC_IsEnabled+0x1a>
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d101      	bne.n	8000ba2 <LL_ADC_IsDisableOngoing+0x18>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e000      	b.n	8000ba4 <LL_ADC_IsDisableOngoing+0x1a>
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000bc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bc4:	f043 0204 	orr.w	r2, r3, #4
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000be8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bec:	f043 0210 	orr.w	r2, r3, #16
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d101      	bne.n	8000c18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e000      	b.n	8000c1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c3a:	f043 0220 	orr.w	r2, r3, #32
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	2b08      	cmp	r3, #8
 8000c60:	d101      	bne.n	8000c66 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e130      	b.n	8000ef0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d109      	bne.n	8000cb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff fc47 	bl	8000530 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fef1 	bl	8000a9c <LL_ADC_IsDeepPowerDownEnabled>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d004      	beq.n	8000cca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fed7 	bl	8000a78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff0c 	bl	8000aec <LL_ADC_IsInternalRegulatorEnabled>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d115      	bne.n	8000d06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fef0 	bl	8000ac4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ce4:	4b84      	ldr	r3, [pc, #528]	; (8000ef8 <HAL_ADC_Init+0x284>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	099b      	lsrs	r3, r3, #6
 8000cea:	4a84      	ldr	r2, [pc, #528]	; (8000efc <HAL_ADC_Init+0x288>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	099b      	lsrs	r3, r3, #6
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000cf8:	e002      	b.n	8000d00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f9      	bne.n	8000cfa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff feee 	bl	8000aec <LL_ADC_IsInternalRegulatorEnabled>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10d      	bne.n	8000d32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d1a:	f043 0210 	orr.w	r2, r3, #16
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	f043 0201 	orr.w	r2, r3, #1
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff62 	bl	8000c00 <LL_ADC_REG_IsConversionOngoing>
 8000d3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d42:	f003 0310 	and.w	r3, r3, #16
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 80c9 	bne.w	8000ede <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 80c5 	bne.w	8000ede <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d58:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d5c:	f043 0202 	orr.w	r2, r3, #2
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fefb 	bl	8000b64 <LL_ADC_IsEnabled>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d115      	bne.n	8000da0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d74:	4862      	ldr	r0, [pc, #392]	; (8000f00 <HAL_ADC_Init+0x28c>)
 8000d76:	f7ff fef5 	bl	8000b64 <LL_ADC_IsEnabled>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	4861      	ldr	r0, [pc, #388]	; (8000f04 <HAL_ADC_Init+0x290>)
 8000d7e:	f7ff fef1 	bl	8000b64 <LL_ADC_IsEnabled>
 8000d82:	4603      	mov	r3, r0
 8000d84:	431c      	orrs	r4, r3
 8000d86:	4860      	ldr	r0, [pc, #384]	; (8000f08 <HAL_ADC_Init+0x294>)
 8000d88:	f7ff feec 	bl	8000b64 <LL_ADC_IsEnabled>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4323      	orrs	r3, r4
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d105      	bne.n	8000da0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	485c      	ldr	r0, [pc, #368]	; (8000f0c <HAL_ADC_Init+0x298>)
 8000d9c:	f7ff fd38 	bl	8000810 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7e5b      	ldrb	r3, [r3, #25]
 8000da4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000daa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000db0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000db6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dbe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d106      	bne.n	8000ddc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	045b      	lsls	r3, r3, #17
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d009      	beq.n	8000df8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <HAL_ADC_Init+0x29c>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	69b9      	ldr	r1, [r7, #24]
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff1c 	bl	8000c4e <LL_ADC_INJ_IsConversionOngoing>
 8000e16:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d13d      	bne.n	8000e9a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d13a      	bne.n	8000e9a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e28:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e30:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e40:	f023 0302 	bic.w	r3, r3, #2
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	6812      	ldr	r2, [r2, #0]
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	430b      	orrs	r3, r1
 8000e4c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d118      	bne.n	8000e8a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000e62:	f023 0304 	bic.w	r3, r3, #4
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e6e:	4311      	orrs	r1, r2
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000e74:	4311      	orrs	r1, r2
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f042 0201 	orr.w	r2, r2, #1
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	e007      	b.n	8000e9a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 0201 	bic.w	r2, r2, #1
 8000e98:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10c      	bne.n	8000ebc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f023 010f 	bic.w	r1, r3, #15
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	631a      	str	r2, [r3, #48]	; 0x30
 8000eba:	e007      	b.n	8000ecc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 020f 	bic.w	r2, r2, #15
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed0:	f023 0303 	bic.w	r3, r3, #3
 8000ed4:	f043 0201 	orr.w	r2, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	655a      	str	r2, [r3, #84]	; 0x54
 8000edc:	e007      	b.n	8000eee <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee2:	f043 0210 	orr.w	r2, r3, #16
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000eee:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3724      	adds	r7, #36	; 0x24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	053e2d63 	.word	0x053e2d63
 8000f00:	50040000 	.word	0x50040000
 8000f04:	50040100 	.word	0x50040100
 8000f08:	50040200 	.word	0x50040200
 8000f0c:	50040300 	.word	0x50040300
 8000f10:	fff0c007 	.word	0xfff0c007

08000f14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f1c:	4857      	ldr	r0, [pc, #348]	; (800107c <HAL_ADC_Start+0x168>)
 8000f1e:	f7ff fd8f 	bl	8000a40 <LL_ADC_GetMultimode>
 8000f22:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fe69 	bl	8000c00 <LL_ADC_REG_IsConversionOngoing>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f040 809c 	bne.w	800106e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d101      	bne.n	8000f44 <HAL_ADC_Start+0x30>
 8000f40:	2302      	movs	r3, #2
 8000f42:	e097      	b.n	8001074 <HAL_ADC_Start+0x160>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 fe63 	bl	8001c18 <ADC_Enable>
 8000f52:	4603      	mov	r3, r0
 8000f54:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f040 8083 	bne.w	8001064 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f66:	f023 0301 	bic.w	r3, r3, #1
 8000f6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a42      	ldr	r2, [pc, #264]	; (8001080 <HAL_ADC_Start+0x16c>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d002      	beq.n	8000f82 <HAL_ADC_Start+0x6e>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	e000      	b.n	8000f84 <HAL_ADC_Start+0x70>
 8000f82:	4b40      	ldr	r3, [pc, #256]	; (8001084 <HAL_ADC_Start+0x170>)
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	6812      	ldr	r2, [r2, #0]
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d002      	beq.n	8000f92 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d105      	bne.n	8000f9e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000faa:	d106      	bne.n	8000fba <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb0:	f023 0206 	bic.w	r2, r3, #6
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	659a      	str	r2, [r3, #88]	; 0x58
 8000fb8:	e002      	b.n	8000fc0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	221c      	movs	r2, #28
 8000fc6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a2a      	ldr	r2, [pc, #168]	; (8001080 <HAL_ADC_Start+0x16c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d002      	beq.n	8000fe0 <HAL_ADC_Start+0xcc>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	e000      	b.n	8000fe2 <HAL_ADC_Start+0xce>
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <HAL_ADC_Start+0x170>)
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d008      	beq.n	8000ffc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	d002      	beq.n	8000ffc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b09      	cmp	r3, #9
 8000ffa:	d114      	bne.n	8001026 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d007      	beq.n	800101a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001012:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fdc6 	bl	8000bb0 <LL_ADC_REG_StartConversion>
 8001024:	e025      	b.n	8001072 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <HAL_ADC_Start+0x16c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d002      	beq.n	8001042 <HAL_ADC_Start+0x12e>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	e000      	b.n	8001044 <HAL_ADC_Start+0x130>
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_ADC_Start+0x170>)
 8001044:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00f      	beq.n	8001072 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800105a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	655a      	str	r2, [r3, #84]	; 0x54
 8001062:	e006      	b.n	8001072 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800106c:	e001      	b.n	8001072 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800106e:	2302      	movs	r3, #2
 8001070:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001072:	7dfb      	ldrb	r3, [r7, #23]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	50040300 	.word	0x50040300
 8001080:	50040100 	.word	0x50040100
 8001084:	50040000 	.word	0x50040000

08001088 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001096:	2b01      	cmp	r3, #1
 8001098:	d101      	bne.n	800109e <HAL_ADC_Stop+0x16>
 800109a:	2302      	movs	r3, #2
 800109c:	e023      	b.n	80010e6 <HAL_ADC_Stop+0x5e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80010a6:	2103      	movs	r1, #3
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 fcf9 	bl	8001aa0 <ADC_ConversionStop>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d111      	bne.n	80010dc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fe33 	bl	8001d24 <ADC_Disable>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d109      	bne.n	80010dc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010d0:	f023 0301 	bic.w	r3, r3, #1
 80010d4:	f043 0201 	orr.w	r2, r3, #1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010fa:	4866      	ldr	r0, [pc, #408]	; (8001294 <HAL_ADC_PollForConversion+0x1a4>)
 80010fc:	f7ff fca0 	bl	8000a40 <LL_ADC_GetMultimode>
 8001100:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	2b08      	cmp	r3, #8
 8001108:	d102      	bne.n	8001110 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800110a:	2308      	movs	r3, #8
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e02a      	b.n	8001166 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2b05      	cmp	r3, #5
 800111a:	d002      	beq.n	8001122 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b09      	cmp	r3, #9
 8001120:	d111      	bne.n	8001146 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b00      	cmp	r3, #0
 800112e:	d007      	beq.n	8001140 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001134:	f043 0220 	orr.w	r2, r3, #32
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e0a4      	b.n	800128a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001140:	2304      	movs	r3, #4
 8001142:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001144:	e00f      	b.n	8001166 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001146:	4853      	ldr	r0, [pc, #332]	; (8001294 <HAL_ADC_PollForConversion+0x1a4>)
 8001148:	f7ff fc88 	bl	8000a5c <LL_ADC_GetMultiDMATransfer>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001156:	f043 0220 	orr.w	r2, r3, #32
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e093      	b.n	800128a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001162:	2304      	movs	r3, #4
 8001164:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001166:	f7ff fb23 	bl	80007b0 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800116c:	e021      	b.n	80011b2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d01d      	beq.n	80011b2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001176:	f7ff fb1b 	bl	80007b0 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d302      	bcc.n	800118c <HAL_ADC_PollForConversion+0x9c>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d112      	bne.n	80011b2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10b      	bne.n	80011b2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119e:	f043 0204 	orr.w	r2, r3, #4
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e06b      	b.n	800128a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0d6      	beq.n	800116e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fba6 	bl	8000922 <LL_ADC_REG_IsTriggerSourceSWStart>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d01c      	beq.n	8001216 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7e5b      	ldrb	r3, [r3, #25]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d118      	bne.n	8001216 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d111      	bne.n	8001216 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <HAL_ADC_PollForConversion+0x1a8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d002      	beq.n	8001226 <HAL_ADC_PollForConversion+0x136>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	e000      	b.n	8001228 <HAL_ADC_PollForConversion+0x138>
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_ADC_PollForConversion+0x1ac>)
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	4293      	cmp	r3, r2
 800122e:	d008      	beq.n	8001242 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2b05      	cmp	r3, #5
 800123a:	d002      	beq.n	8001242 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2b09      	cmp	r3, #9
 8001240:	d104      	bne.n	800124c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	e00c      	b.n	8001266 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a11      	ldr	r2, [pc, #68]	; (8001298 <HAL_ADC_PollForConversion+0x1a8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d002      	beq.n	800125c <HAL_ADC_PollForConversion+0x16c>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	e000      	b.n	800125e <HAL_ADC_PollForConversion+0x16e>
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_ADC_PollForConversion+0x1ac>)
 800125e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	2b08      	cmp	r3, #8
 800126a:	d104      	bne.n	8001276 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2208      	movs	r2, #8
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e008      	b.n	8001288 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d103      	bne.n	8001288 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	220c      	movs	r2, #12
 8001286:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	50040300 	.word	0x50040300
 8001298:	50040100 	.word	0x50040100
 800129c:	50040000 	.word	0x50040000

080012a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0b6      	sub	sp, #216	; 0xd8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d101      	bne.n	80012de <HAL_ADC_ConfigChannel+0x22>
 80012da:	2302      	movs	r3, #2
 80012dc:	e3c9      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x7b6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fc88 	bl	8000c00 <LL_ADC_REG_IsConversionOngoing>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 83aa 	bne.w	8001a4c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b05      	cmp	r3, #5
 8001306:	d824      	bhi.n	8001352 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	3b02      	subs	r3, #2
 800130e:	2b03      	cmp	r3, #3
 8001310:	d81b      	bhi.n	800134a <HAL_ADC_ConfigChannel+0x8e>
 8001312:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <HAL_ADC_ConfigChannel+0x5c>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	08001329 	.word	0x08001329
 800131c:	08001331 	.word	0x08001331
 8001320:	08001339 	.word	0x08001339
 8001324:	08001341 	.word	0x08001341
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001328:	230c      	movs	r3, #12
 800132a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800132e:	e010      	b.n	8001352 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001330:	2312      	movs	r3, #18
 8001332:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001336:	e00c      	b.n	8001352 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001338:	2318      	movs	r3, #24
 800133a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800133e:	e008      	b.n	8001352 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001348:	e003      	b.n	8001352 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800134a:	2306      	movs	r3, #6
 800134c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001350:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001360:	f7ff faf2 	bl	8000948 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fc49 	bl	8000c00 <LL_ADC_REG_IsConversionOngoing>
 800136e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fc69 	bl	8000c4e <LL_ADC_INJ_IsConversionOngoing>
 800137c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001380:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001384:	2b00      	cmp	r3, #0
 8001386:	f040 81a4 	bne.w	80016d2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800138a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 819f 	bne.w	80016d2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	6819      	ldr	r1, [r3, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	461a      	mov	r2, r3
 80013a2:	f7ff fafd 	bl	80009a0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d00a      	beq.n	80013de <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	6919      	ldr	r1, [r3, #16]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80013d8:	f7ff fa4e 	bl	8000878 <LL_ADC_SetOffset>
 80013dc:	e179      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fa6b 	bl	80008c0 <LL_ADC_GetOffsetChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10a      	bne.n	800140a <HAL_ADC_ConfigChannel+0x14e>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fa60 	bl	80008c0 <LL_ADC_GetOffsetChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	0e9b      	lsrs	r3, r3, #26
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	e01e      	b.n	8001448 <HAL_ADC_ConfigChannel+0x18c>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fa55 	bl	80008c0 <LL_ADC_GetOffsetChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800142c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001438:	2320      	movs	r3, #32
 800143a:	e004      	b.n	8001446 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800143c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001440:	fab3 f383 	clz	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001450:	2b00      	cmp	r3, #0
 8001452:	d105      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x1a4>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0e9b      	lsrs	r3, r3, #26
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	e018      	b.n	8001492 <HAL_ADC_ConfigChannel+0x1d6>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800147c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001484:	2320      	movs	r3, #32
 8001486:	e004      	b.n	8001492 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001492:	429a      	cmp	r2, r3
 8001494:	d106      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fa24 	bl	80008ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2101      	movs	r1, #1
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fa08 	bl	80008c0 <LL_ADC_GetOffsetChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10a      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x214>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2101      	movs	r1, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f9fd 	bl	80008c0 <LL_ADC_GetOffsetChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	0e9b      	lsrs	r3, r3, #26
 80014ca:	f003 021f 	and.w	r2, r3, #31
 80014ce:	e01e      	b.n	800150e <HAL_ADC_ConfigChannel+0x252>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2101      	movs	r1, #1
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f9f2 	bl	80008c0 <LL_ADC_GetOffsetChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80014ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80014f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80014fe:	2320      	movs	r3, #32
 8001500:	e004      	b.n	800150c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	b2db      	uxtb	r3, r3
 800150c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001516:	2b00      	cmp	r3, #0
 8001518:	d105      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x26a>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	0e9b      	lsrs	r3, r3, #26
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	e018      	b.n	8001558 <HAL_ADC_ConfigChannel+0x29c>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800153a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800153e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800154a:	2320      	movs	r3, #32
 800154c:	e004      	b.n	8001558 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800154e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001558:	429a      	cmp	r2, r3
 800155a:	d106      	bne.n	800156a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	2101      	movs	r1, #1
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f9c1 	bl	80008ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2102      	movs	r1, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff f9a5 	bl	80008c0 <LL_ADC_GetOffsetChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10a      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x2da>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2102      	movs	r1, #2
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff f99a 	bl	80008c0 <LL_ADC_GetOffsetChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	0e9b      	lsrs	r3, r3, #26
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	e01e      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x318>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2102      	movs	r1, #2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff f98f 	bl	80008c0 <LL_ADC_GetOffsetChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80015b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80015bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80015c4:	2320      	movs	r3, #32
 80015c6:	e004      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80015c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x330>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0e9b      	lsrs	r3, r3, #26
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	e014      	b.n	8001616 <HAL_ADC_ConfigChannel+0x35a>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015f4:	fa93 f3a3 	rbit	r3, r3
 80015f8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80015fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001600:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001608:	2320      	movs	r3, #32
 800160a:	e004      	b.n	8001616 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800160c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001616:	429a      	cmp	r2, r3
 8001618:	d106      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2200      	movs	r2, #0
 8001620:	2102      	movs	r1, #2
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f962 	bl	80008ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2103      	movs	r1, #3
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff f946 	bl	80008c0 <LL_ADC_GetOffsetChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10a      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x398>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2103      	movs	r1, #3
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff f93b 	bl	80008c0 <LL_ADC_GetOffsetChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	0e9b      	lsrs	r3, r3, #26
 800164e:	f003 021f 	and.w	r2, r3, #31
 8001652:	e017      	b.n	8001684 <HAL_ADC_ConfigChannel+0x3c8>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2103      	movs	r1, #3
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f930 	bl	80008c0 <LL_ADC_GetOffsetChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800166c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800166e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001676:	2320      	movs	r3, #32
 8001678:	e003      	b.n	8001682 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800167a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168c:	2b00      	cmp	r3, #0
 800168e:	d105      	bne.n	800169c <HAL_ADC_ConfigChannel+0x3e0>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0e9b      	lsrs	r3, r3, #26
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	e011      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x404>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80016aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016ac:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80016ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80016b4:	2320      	movs	r3, #32
 80016b6:	e003      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80016b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d106      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2200      	movs	r2, #0
 80016ca:	2103      	movs	r1, #3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff f90d 	bl	80008ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fa44 	bl	8000b64 <LL_ADC_IsEnabled>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 8140 	bne.w	8001964 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6819      	ldr	r1, [r3, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	461a      	mov	r2, r3
 80016f2:	f7ff f981 	bl	80009f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	4a8f      	ldr	r2, [pc, #572]	; (8001938 <HAL_ADC_ConfigChannel+0x67c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	f040 8131 	bne.w	8001964 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10b      	bne.n	800172a <HAL_ADC_ConfigChannel+0x46e>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	0e9b      	lsrs	r3, r3, #26
 8001718:	3301      	adds	r3, #1
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	2b09      	cmp	r3, #9
 8001720:	bf94      	ite	ls
 8001722:	2301      	movls	r3, #1
 8001724:	2300      	movhi	r3, #0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	e019      	b.n	800175e <HAL_ADC_ConfigChannel+0x4a2>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800173c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001742:	2320      	movs	r3, #32
 8001744:	e003      	b.n	800174e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001748:	fab3 f383 	clz	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	3301      	adds	r3, #1
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	2b09      	cmp	r3, #9
 8001756:	bf94      	ite	ls
 8001758:	2301      	movls	r3, #1
 800175a:	2300      	movhi	r3, #0
 800175c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800175e:	2b00      	cmp	r3, #0
 8001760:	d079      	beq.n	8001856 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176a:	2b00      	cmp	r3, #0
 800176c:	d107      	bne.n	800177e <HAL_ADC_ConfigChannel+0x4c2>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	0e9b      	lsrs	r3, r3, #26
 8001774:	3301      	adds	r3, #1
 8001776:	069b      	lsls	r3, r3, #26
 8001778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800177c:	e015      	b.n	80017aa <HAL_ADC_ConfigChannel+0x4ee>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800178c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800178e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001796:	2320      	movs	r3, #32
 8001798:	e003      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800179a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	069b      	lsls	r3, r3, #26
 80017a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x50e>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	0e9b      	lsrs	r3, r3, #26
 80017bc:	3301      	adds	r3, #1
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	e017      	b.n	80017fa <HAL_ADC_ConfigChannel+0x53e>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80017d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80017dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80017e2:	2320      	movs	r3, #32
 80017e4:	e003      	b.n	80017ee <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80017e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	3301      	adds	r3, #1
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	ea42 0103 	orr.w	r1, r2, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10a      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x564>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0e9b      	lsrs	r3, r3, #26
 8001810:	3301      	adds	r3, #1
 8001812:	f003 021f 	and.w	r2, r3, #31
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	051b      	lsls	r3, r3, #20
 800181e:	e018      	b.n	8001852 <HAL_ADC_ConfigChannel+0x596>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800182e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001830:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001838:	2320      	movs	r3, #32
 800183a:	e003      	b.n	8001844 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800183c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	3301      	adds	r3, #1
 8001846:	f003 021f 	and.w	r2, r3, #31
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001852:	430b      	orrs	r3, r1
 8001854:	e081      	b.n	800195a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185e:	2b00      	cmp	r3, #0
 8001860:	d107      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x5b6>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	0e9b      	lsrs	r3, r3, #26
 8001868:	3301      	adds	r3, #1
 800186a:	069b      	lsls	r3, r3, #26
 800186c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001870:	e015      	b.n	800189e <HAL_ADC_ConfigChannel+0x5e2>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800188a:	2320      	movs	r3, #32
 800188c:	e003      	b.n	8001896 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	3301      	adds	r3, #1
 8001898:	069b      	lsls	r3, r3, #26
 800189a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_ADC_ConfigChannel+0x602>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	0e9b      	lsrs	r3, r3, #26
 80018b0:	3301      	adds	r3, #1
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	2101      	movs	r1, #1
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	e017      	b.n	80018ee <HAL_ADC_ConfigChannel+0x632>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	61bb      	str	r3, [r7, #24]
  return result;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80018d6:	2320      	movs	r3, #32
 80018d8:	e003      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	ea42 0103 	orr.w	r1, r2, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10d      	bne.n	800191a <HAL_ADC_ConfigChannel+0x65e>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0e9b      	lsrs	r3, r3, #26
 8001904:	3301      	adds	r3, #1
 8001906:	f003 021f 	and.w	r2, r3, #31
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	3b1e      	subs	r3, #30
 8001912:	051b      	lsls	r3, r3, #20
 8001914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001918:	e01e      	b.n	8001958 <HAL_ADC_ConfigChannel+0x69c>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	fa93 f3a3 	rbit	r3, r3
 8001926:	60fb      	str	r3, [r7, #12]
  return result;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d104      	bne.n	800193c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001932:	2320      	movs	r3, #32
 8001934:	e006      	b.n	8001944 <HAL_ADC_ConfigChannel+0x688>
 8001936:	bf00      	nop
 8001938:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3301      	adds	r3, #1
 8001946:	f003 021f 	and.w	r2, r3, #31
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	3b1e      	subs	r3, #30
 8001952:	051b      	lsls	r3, r3, #20
 8001954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001958:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff f81e 	bl	80009a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_ADC_ConfigChannel+0x7c0>)
 800196a:	4013      	ands	r3, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d07a      	beq.n	8001a66 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001970:	4843      	ldr	r0, [pc, #268]	; (8001a80 <HAL_ADC_ConfigChannel+0x7c4>)
 8001972:	f7fe ff73 	bl	800085c <LL_ADC_GetCommonPathInternalCh>
 8001976:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a41      	ldr	r2, [pc, #260]	; (8001a84 <HAL_ADC_ConfigChannel+0x7c8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d12c      	bne.n	80019de <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001984:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d126      	bne.n	80019de <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a3c      	ldr	r2, [pc, #240]	; (8001a88 <HAL_ADC_ConfigChannel+0x7cc>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d004      	beq.n	80019a4 <HAL_ADC_ConfigChannel+0x6e8>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a3b      	ldr	r2, [pc, #236]	; (8001a8c <HAL_ADC_ConfigChannel+0x7d0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d15d      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019ac:	4619      	mov	r1, r3
 80019ae:	4834      	ldr	r0, [pc, #208]	; (8001a80 <HAL_ADC_ConfigChannel+0x7c4>)
 80019b0:	f7fe ff41 	bl	8000836 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019b4:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <HAL_ADC_ConfigChannel+0x7d4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	4a36      	ldr	r2, [pc, #216]	; (8001a94 <HAL_ADC_ConfigChannel+0x7d8>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80019ce:	e002      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f9      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019dc:	e040      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a2d      	ldr	r2, [pc, #180]	; (8001a98 <HAL_ADC_ConfigChannel+0x7dc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d118      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d112      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a23      	ldr	r2, [pc, #140]	; (8001a88 <HAL_ADC_ConfigChannel+0x7cc>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d004      	beq.n	8001a08 <HAL_ADC_ConfigChannel+0x74c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <HAL_ADC_ConfigChannel+0x7d0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d12d      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a10:	4619      	mov	r1, r3
 8001a12:	481b      	ldr	r0, [pc, #108]	; (8001a80 <HAL_ADC_ConfigChannel+0x7c4>)
 8001a14:	f7fe ff0f 	bl	8000836 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a18:	e024      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	; (8001a9c <HAL_ADC_ConfigChannel+0x7e0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d120      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d11a      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_ADC_ConfigChannel+0x7cc>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d115      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a42:	4619      	mov	r1, r3
 8001a44:	480e      	ldr	r0, [pc, #56]	; (8001a80 <HAL_ADC_ConfigChannel+0x7c4>)
 8001a46:	f7fe fef6 	bl	8000836 <LL_ADC_SetCommonPathInternalCh>
 8001a4a:	e00c      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a50:	f043 0220 	orr.w	r2, r3, #32
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001a5e:	e002      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a60:	bf00      	nop
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	37d8      	adds	r7, #216	; 0xd8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	80080000 	.word	0x80080000
 8001a80:	50040300 	.word	0x50040300
 8001a84:	c7520000 	.word	0xc7520000
 8001a88:	50040000 	.word	0x50040000
 8001a8c:	50040200 	.word	0x50040200
 8001a90:	20000000 	.word	0x20000000
 8001a94:	053e2d63 	.word	0x053e2d63
 8001a98:	cb840000 	.word	0xcb840000
 8001a9c:	80000001 	.word	0x80000001

08001aa0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f8a2 	bl	8000c00 <LL_ADC_REG_IsConversionOngoing>
 8001abc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f8c3 	bl	8000c4e <LL_ADC_INJ_IsConversionOngoing>
 8001ac8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d103      	bne.n	8001ad8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8098 	beq.w	8001c08 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d02a      	beq.n	8001b3c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7e5b      	ldrb	r3, [r3, #25]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d126      	bne.n	8001b3c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7e1b      	ldrb	r3, [r3, #24]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d122      	bne.n	8001b3c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001afa:	e014      	b.n	8001b26 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	4a45      	ldr	r2, [pc, #276]	; (8001c14 <ADC_ConversionStop+0x174>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d90d      	bls.n	8001b20 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	f043 0210 	orr.w	r2, r3, #16
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e074      	b.n	8001c0a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	3301      	adds	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b30:	2b40      	cmp	r3, #64	; 0x40
 8001b32:	d1e3      	bne.n	8001afc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d014      	beq.n	8001b6c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f85a 	bl	8000c00 <LL_ADC_REG_IsConversionOngoing>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00c      	beq.n	8001b6c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f817 	bl	8000b8a <LL_ADC_IsDisableOngoing>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d104      	bne.n	8001b6c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f836 	bl	8000bd8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d014      	beq.n	8001b9c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f869 	bl	8000c4e <LL_ADC_INJ_IsConversionOngoing>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00c      	beq.n	8001b9c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe ffff 	bl	8000b8a <LL_ADC_IsDisableOngoing>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d104      	bne.n	8001b9c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f845 	bl	8000c26 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d005      	beq.n	8001bae <ADC_ConversionStop+0x10e>
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d105      	bne.n	8001bb4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001ba8:	230c      	movs	r3, #12
 8001baa:	617b      	str	r3, [r7, #20]
        break;
 8001bac:	e005      	b.n	8001bba <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001bae:	2308      	movs	r3, #8
 8001bb0:	617b      	str	r3, [r7, #20]
        break;
 8001bb2:	e002      	b.n	8001bba <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	617b      	str	r3, [r7, #20]
        break;
 8001bb8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001bba:	f7fe fdf9 	bl	80007b0 <HAL_GetTick>
 8001bbe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001bc0:	e01b      	b.n	8001bfa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001bc2:	f7fe fdf5 	bl	80007b0 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d914      	bls.n	8001bfa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00d      	beq.n	8001bfa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be2:	f043 0210 	orr.w	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e007      	b.n	8001c0a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1dc      	bne.n	8001bc2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3720      	adds	r7, #32
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	a33fffff 	.word	0xa33fffff

08001c18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe ff9b 	bl	8000b64 <LL_ADC_IsEnabled>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d169      	bne.n	8001d08 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <ADC_Enable+0xfc>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00d      	beq.n	8001c5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	f043 0210 	orr.w	r2, r3, #16
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e055      	b.n	8001d0a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe ff56 	bl	8000b14 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c68:	482b      	ldr	r0, [pc, #172]	; (8001d18 <ADC_Enable+0x100>)
 8001c6a:	f7fe fdf7 	bl	800085c <LL_ADC_GetCommonPathInternalCh>
 8001c6e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <ADC_Enable+0x104>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	4a28      	ldr	r2, [pc, #160]	; (8001d20 <ADC_Enable+0x108>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c92:	e002      	b.n	8001c9a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f9      	bne.n	8001c94 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001ca0:	f7fe fd86 	bl	80007b0 <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ca6:	e028      	b.n	8001cfa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe ff59 	bl	8000b64 <LL_ADC_IsEnabled>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d104      	bne.n	8001cc2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe ff29 	bl	8000b14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cc2:	f7fe fd75 	bl	80007b0 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d914      	bls.n	8001cfa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d00d      	beq.n	8001cfa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f043 0210 	orr.w	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e007      	b.n	8001d0a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d1cf      	bne.n	8001ca8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	8000003f 	.word	0x8000003f
 8001d18:	50040300 	.word	0x50040300
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	053e2d63 	.word	0x053e2d63

08001d24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe ff2a 	bl	8000b8a <LL_ADC_IsDisableOngoing>
 8001d36:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe ff11 	bl	8000b64 <LL_ADC_IsEnabled>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d047      	beq.n	8001dd8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d144      	bne.n	8001dd8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 030d 	and.w	r3, r3, #13
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d10c      	bne.n	8001d76 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe feeb 	bl	8000b3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d6e:	f7fe fd1f 	bl	80007b0 <HAL_GetTick>
 8001d72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d74:	e029      	b.n	8001dca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7a:	f043 0210 	orr.w	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e023      	b.n	8001dda <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d92:	f7fe fd0d 	bl	80007b0 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d914      	bls.n	8001dca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00d      	beq.n	8001dca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	f043 0210 	orr.w	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e007      	b.n	8001dda <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1dc      	bne.n	8001d92 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <LL_ADC_IsEnabled>:
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <LL_ADC_IsEnabled+0x18>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <LL_ADC_IsEnabled+0x1a>
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_StartCalibration>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001e1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e24:	4313      	orrs	r3, r2
 8001e26:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_ADC_IsCalibrationOnGoing>:
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e4e:	d101      	bne.n	8001e54 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_ADC_REG_IsConversionOngoing>:
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d101      	bne.n	8001e7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADCEx_Calibration_Start+0x1c>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e04d      	b.n	8001f40 <HAL_ADCEx_Calibration_Start+0xb8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff39 	bl	8001d24 <ADC_Disable>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d136      	bne.n	8001f2a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ec4:	f023 0302 	bic.w	r3, r3, #2
 8001ec8:	f043 0202 	orr.w	r2, r3, #2
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6839      	ldr	r1, [r7, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff96 	bl	8001e08 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001edc:	e014      	b.n	8001f08 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8001eea:	d30d      	bcc.n	8001f08 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	f023 0312 	bic.w	r3, r3, #18
 8001ef4:	f043 0210 	orr.w	r2, r3, #16
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e01b      	b.n	8001f40 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff94 	bl	8001e3a <LL_ADC_IsCalibrationOnGoing>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e2      	bne.n	8001ede <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1c:	f023 0303 	bic.w	r3, r3, #3
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
 8001f28:	e005      	b.n	8001f36 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f043 0210 	orr.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b09f      	sub	sp, #124	; 0x7c
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e093      	b.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001f72:	2300      	movs	r3, #0
 8001f74:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a47      	ldr	r2, [pc, #284]	; (8002098 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d102      	bne.n	8001f86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f80:	4b46      	ldr	r3, [pc, #280]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	e001      	b.n	8001f8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e072      	b.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff59 	bl	8001e62 <LL_ADC_REG_IsConversionOngoing>
 8001fb0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff53 	bl	8001e62 <LL_ADC_REG_IsConversionOngoing>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d154      	bne.n	800206c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d151      	bne.n	800206c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001fca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d02c      	beq.n	800202e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fe6:	035b      	lsls	r3, r3, #13
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ff0:	4829      	ldr	r0, [pc, #164]	; (8002098 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001ff2:	f7ff fef6 	bl	8001de2 <LL_ADC_IsEnabled>
 8001ff6:	4604      	mov	r4, r0
 8001ff8:	4828      	ldr	r0, [pc, #160]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ffa:	f7ff fef2 	bl	8001de2 <LL_ADC_IsEnabled>
 8001ffe:	4603      	mov	r3, r0
 8002000:	431c      	orrs	r4, r3
 8002002:	4828      	ldr	r0, [pc, #160]	; (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002004:	f7ff feed 	bl	8001de2 <LL_ADC_IsEnabled>
 8002008:	4603      	mov	r3, r0
 800200a:	4323      	orrs	r3, r4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d137      	bne.n	8002080 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002018:	f023 030f 	bic.w	r3, r3, #15
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	6811      	ldr	r1, [r2, #0]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	6892      	ldr	r2, [r2, #8]
 8002024:	430a      	orrs	r2, r1
 8002026:	431a      	orrs	r2, r3
 8002028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800202c:	e028      	b.n	8002080 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800202e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002038:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800203a:	4817      	ldr	r0, [pc, #92]	; (8002098 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800203c:	f7ff fed1 	bl	8001de2 <LL_ADC_IsEnabled>
 8002040:	4604      	mov	r4, r0
 8002042:	4816      	ldr	r0, [pc, #88]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002044:	f7ff fecd 	bl	8001de2 <LL_ADC_IsEnabled>
 8002048:	4603      	mov	r3, r0
 800204a:	431c      	orrs	r4, r3
 800204c:	4815      	ldr	r0, [pc, #84]	; (80020a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800204e:	f7ff fec8 	bl	8001de2 <LL_ADC_IsEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	4323      	orrs	r3, r4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d112      	bne.n	8002080 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800205a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002062:	f023 030f 	bic.w	r3, r3, #15
 8002066:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002068:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800206a:	e009      	b.n	8002080 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800207e:	e000      	b.n	8002082 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002080:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800208a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800208e:	4618      	mov	r0, r3
 8002090:	377c      	adds	r7, #124	; 0x7c
 8002092:	46bd      	mov	sp, r7
 8002094:	bd90      	pop	{r4, r7, pc}
 8002096:	bf00      	nop
 8002098:	50040000 	.word	0x50040000
 800209c:	50040100 	.word	0x50040100
 80020a0:	50040300 	.word	0x50040300
 80020a4:	50040200 	.word	0x50040200

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	; (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff47 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff5c 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffb0 	bl	80021c8 <SysTick_Config>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002282:	e17f      	b.n	8002584 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8171 	beq.w	800257e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d005      	beq.n	80022b4 <HAL_GPIO_Init+0x40>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d130      	bne.n	8002316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ea:	2201      	movs	r2, #1
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	f003 0201 	and.w	r2, r3, #1
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b03      	cmp	r3, #3
 8002320:	d118      	bne.n	8002354 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002328:	2201      	movs	r2, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	08db      	lsrs	r3, r3, #3
 800233e:	f003 0201 	and.w	r2, r3, #1
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b03      	cmp	r3, #3
 800235e:	d017      	beq.n	8002390 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d123      	bne.n	80023e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	6939      	ldr	r1, [r7, #16]
 80023e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80ac 	beq.w	800257e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <HAL_GPIO_Init+0x330>)
 8002428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242a:	4a5e      	ldr	r2, [pc, #376]	; (80025a4 <HAL_GPIO_Init+0x330>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6613      	str	r3, [r2, #96]	; 0x60
 8002432:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <HAL_GPIO_Init+0x330>)
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800243e:	4a5a      	ldr	r2, [pc, #360]	; (80025a8 <HAL_GPIO_Init+0x334>)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002468:	d025      	beq.n	80024b6 <HAL_GPIO_Init+0x242>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4f      	ldr	r2, [pc, #316]	; (80025ac <HAL_GPIO_Init+0x338>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01f      	beq.n	80024b2 <HAL_GPIO_Init+0x23e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4e      	ldr	r2, [pc, #312]	; (80025b0 <HAL_GPIO_Init+0x33c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x23a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4d      	ldr	r2, [pc, #308]	; (80025b4 <HAL_GPIO_Init+0x340>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x236>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4c      	ldr	r2, [pc, #304]	; (80025b8 <HAL_GPIO_Init+0x344>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x232>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4b      	ldr	r2, [pc, #300]	; (80025bc <HAL_GPIO_Init+0x348>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x22e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4a      	ldr	r2, [pc, #296]	; (80025c0 <HAL_GPIO_Init+0x34c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x22a>
 800249a:	2306      	movs	r3, #6
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 800249e:	2307      	movs	r3, #7
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024b6:	2300      	movs	r3, #0
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c8:	4937      	ldr	r1, [pc, #220]	; (80025a8 <HAL_GPIO_Init+0x334>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_GPIO_Init+0x350>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024fa:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <HAL_GPIO_Init+0x350>)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_GPIO_Init+0x350>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_GPIO_Init+0x350>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_GPIO_Init+0x350>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_GPIO_Init+0x350>)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_GPIO_Init+0x350>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_GPIO_Init+0x350>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	f47f ae78 	bne.w	8002284 <HAL_GPIO_Init+0x10>
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010000 	.word	0x40010000
 80025ac:	48000400 	.word	0x48000400
 80025b0:	48000800 	.word	0x48000800
 80025b4:	48000c00 	.word	0x48000c00
 80025b8:	48001000 	.word	0x48001000
 80025bc:	48001400 	.word	0x48001400
 80025c0:	48001800 	.word	0x48001800
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <HAL_PWREx_GetVoltageRange+0x18>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40007000 	.word	0x40007000

08002614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002622:	d130      	bne.n	8002686 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002624:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800262c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002630:	d038      	beq.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800263a:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002640:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2232      	movs	r2, #50	; 0x32
 8002648:	fb02 f303 	mul.w	r3, r2, r3
 800264c:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0c9b      	lsrs	r3, r3, #18
 8002654:	3301      	adds	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002658:	e002      	b.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3b01      	subs	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002660:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266c:	d102      	bne.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x60>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f2      	bne.n	800265a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002680:	d110      	bne.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e00f      	b.n	80026a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800268e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002692:	d007      	beq.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800269c:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40007000 	.word	0x40007000
 80026b8:	20000000 	.word	0x20000000
 80026bc:	431bde83 	.word	0x431bde83

080026c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e3ca      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d2:	4b97      	ldr	r3, [pc, #604]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026dc:	4b94      	ldr	r3, [pc, #592]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80e4 	beq.w	80028bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_RCC_OscConfig+0x4a>
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b0c      	cmp	r3, #12
 80026fe:	f040 808b 	bne.w	8002818 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b01      	cmp	r3, #1
 8002706:	f040 8087 	bne.w	8002818 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800270a:	4b89      	ldr	r3, [pc, #548]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_RCC_OscConfig+0x62>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e3a2      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1a      	ldr	r2, [r3, #32]
 8002726:	4b82      	ldr	r3, [pc, #520]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <HAL_RCC_OscConfig+0x7c>
 8002732:	4b7f      	ldr	r3, [pc, #508]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800273a:	e005      	b.n	8002748 <HAL_RCC_OscConfig+0x88>
 800273c:	4b7c      	ldr	r3, [pc, #496]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002748:	4293      	cmp	r3, r2
 800274a:	d223      	bcs.n	8002794 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fd1d 	bl	8003190 <RCC_SetFlashLatencyFromMSIRange>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e383      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002760:	4b73      	ldr	r3, [pc, #460]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a72      	ldr	r2, [pc, #456]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002766:	f043 0308 	orr.w	r3, r3, #8
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b70      	ldr	r3, [pc, #448]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	496d      	ldr	r1, [pc, #436]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277e:	4b6c      	ldr	r3, [pc, #432]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	4968      	ldr	r1, [pc, #416]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
 8002792:	e025      	b.n	80027e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002794:	4b66      	ldr	r3, [pc, #408]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a65      	ldr	r2, [pc, #404]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 800279a:	f043 0308 	orr.w	r3, r3, #8
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4960      	ldr	r1, [pc, #384]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b2:	4b5f      	ldr	r3, [pc, #380]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	495b      	ldr	r1, [pc, #364]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fcdd 	bl	8003190 <RCC_SetFlashLatencyFromMSIRange>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e343      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027e0:	f000 fc4a 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b52      	ldr	r3, [pc, #328]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	4950      	ldr	r1, [pc, #320]	; (8002934 <HAL_RCC_OscConfig+0x274>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	4a4e      	ldr	r2, [pc, #312]	; (8002938 <HAL_RCC_OscConfig+0x278>)
 80027fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002800:	4b4e      	ldr	r3, [pc, #312]	; (800293c <HAL_RCC_OscConfig+0x27c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd ff83 	bl	8000710 <HAL_InitTick>
 800280a:	4603      	mov	r3, r0
 800280c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d052      	beq.n	80028ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	e327      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d032      	beq.n	8002886 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002820:	4b43      	ldr	r3, [pc, #268]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a42      	ldr	r2, [pc, #264]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800282c:	f7fd ffc0 	bl	80007b0 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002834:	f7fd ffbc 	bl	80007b0 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e310      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002846:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002852:	4b37      	ldr	r3, [pc, #220]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a36      	ldr	r2, [pc, #216]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002858:	f043 0308 	orr.w	r3, r3, #8
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b34      	ldr	r3, [pc, #208]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4931      	ldr	r1, [pc, #196]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002870:	4b2f      	ldr	r3, [pc, #188]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	492c      	ldr	r1, [pc, #176]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
 8002884:	e01a      	b.n	80028bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002886:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a29      	ldr	r2, [pc, #164]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002892:	f7fd ff8d 	bl	80007b0 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800289a:	f7fd ff89 	bl	80007b0 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e2dd      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ac:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x1da>
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d074      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d005      	beq.n	80028da <HAL_RCC_OscConfig+0x21a>
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b0c      	cmp	r3, #12
 80028d2:	d10e      	bne.n	80028f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d10b      	bne.n	80028f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d064      	beq.n	80029b0 <HAL_RCC_OscConfig+0x2f0>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d160      	bne.n	80029b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e2ba      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x24a>
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e026      	b.n	8002958 <HAL_RCC_OscConfig+0x298>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002912:	d115      	bne.n	8002940 <HAL_RCC_OscConfig+0x280>
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a05      	ldr	r2, [pc, #20]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 800291a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a02      	ldr	r2, [pc, #8]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	e014      	b.n	8002958 <HAL_RCC_OscConfig+0x298>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	08003c38 	.word	0x08003c38
 8002938:	20000000 	.word	0x20000000
 800293c:	20000004 	.word	0x20000004
 8002940:	4ba0      	ldr	r3, [pc, #640]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a9f      	ldr	r2, [pc, #636]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b9d      	ldr	r3, [pc, #628]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a9c      	ldr	r2, [pc, #624]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fd ff26 	bl	80007b0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7fd ff22 	bl	80007b0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e276      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297a:	4b92      	ldr	r3, [pc, #584]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x2a8>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fd ff12 	bl	80007b0 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002990:	f7fd ff0e 	bl	80007b0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e262      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029a2:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x2d0>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d060      	beq.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_OscConfig+0x310>
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d119      	bne.n	80029fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d116      	bne.n	80029fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d0:	4b7c      	ldr	r3, [pc, #496]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x328>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e23f      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b76      	ldr	r3, [pc, #472]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	4973      	ldr	r1, [pc, #460]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029fc:	e040      	b.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d023      	beq.n	8002a4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a06:	4b6f      	ldr	r3, [pc, #444]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6e      	ldr	r2, [pc, #440]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fd fecd 	bl	80007b0 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7fd fec9 	bl	80007b0 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e21d      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a2c:	4b65      	ldr	r3, [pc, #404]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a38:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	495f      	ldr	r1, [pc, #380]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
 8002a4c:	e018      	b.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a5c      	ldr	r2, [pc, #368]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fd fea9 	bl	80007b0 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a62:	f7fd fea5 	bl	80007b0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1f9      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a74:	4b53      	ldr	r3, [pc, #332]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d03c      	beq.n	8002b06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01c      	beq.n	8002ace <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a94:	4b4b      	ldr	r3, [pc, #300]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9a:	4a4a      	ldr	r2, [pc, #296]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7fd fe84 	bl	80007b0 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aac:	f7fd fe80 	bl	80007b0 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1d4      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002abe:	4b41      	ldr	r3, [pc, #260]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ef      	beq.n	8002aac <HAL_RCC_OscConfig+0x3ec>
 8002acc:	e01b      	b.n	8002b06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ace:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad4:	4a3b      	ldr	r2, [pc, #236]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fd fe67 	bl	80007b0 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7fd fe63 	bl	80007b0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1b7      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af8:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1ef      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80a6 	beq.w	8002c60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b14:	2300      	movs	r3, #0
 8002b16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b18:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10d      	bne.n	8002b40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	4a26      	ldr	r2, [pc, #152]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b30:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b40:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <HAL_RCC_OscConfig+0x508>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d118      	bne.n	8002b7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b4c:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <HAL_RCC_OscConfig+0x508>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <HAL_RCC_OscConfig+0x508>)
 8002b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b58:	f7fd fe2a 	bl	80007b0 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b60:	f7fd fe26 	bl	80007b0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e17a      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <HAL_RCC_OscConfig+0x508>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d108      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4d8>
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b96:	e029      	b.n	8002bec <HAL_RCC_OscConfig+0x52c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	d115      	bne.n	8002bcc <HAL_RCC_OscConfig+0x50c>
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	4a07      	ldr	r2, [pc, #28]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	4a03      	ldr	r2, [pc, #12]	; (8002bc4 <HAL_RCC_OscConfig+0x504>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc0:	e014      	b.n	8002bec <HAL_RCC_OscConfig+0x52c>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	4b9c      	ldr	r3, [pc, #624]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	4a9b      	ldr	r2, [pc, #620]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bdc:	4b98      	ldr	r3, [pc, #608]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be2:	4a97      	ldr	r2, [pc, #604]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002be4:	f023 0304 	bic.w	r3, r3, #4
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d016      	beq.n	8002c22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7fd fddc 	bl	80007b0 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7fd fdd8 	bl	80007b0 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e12a      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c12:	4b8b      	ldr	r3, [pc, #556]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ed      	beq.n	8002bfc <HAL_RCC_OscConfig+0x53c>
 8002c20:	e015      	b.n	8002c4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fd fdc5 	bl	80007b0 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fd fdc1 	bl	80007b0 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e113      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c40:	4b7f      	ldr	r3, [pc, #508]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ed      	bne.n	8002c2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c4e:	7ffb      	ldrb	r3, [r7, #31]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d105      	bne.n	8002c60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c54:	4b7a      	ldr	r3, [pc, #488]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	4a79      	ldr	r2, [pc, #484]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80fe 	beq.w	8002e66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	f040 80d0 	bne.w	8002e14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c74:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d130      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	3b01      	subs	r3, #1
 8002c94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d127      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d11f      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cb4:	2a07      	cmp	r2, #7
 8002cb6:	bf14      	ite	ne
 8002cb8:	2201      	movne	r2, #1
 8002cba:	2200      	moveq	r2, #0
 8002cbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d113      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d109      	bne.n	8002cea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d06e      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b0c      	cmp	r3, #12
 8002cee:	d069      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cf0:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cfc:	4b50      	ldr	r3, [pc, #320]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0ad      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d0c:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a4b      	ldr	r2, [pc, #300]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d18:	f7fd fd4a 	bl	80007b0 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fd fd46 	bl	80007b0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e09a      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d32:	4b43      	ldr	r3, [pc, #268]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d3e:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	4b40      	ldr	r3, [pc, #256]	; (8002e44 <HAL_RCC_OscConfig+0x784>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	4311      	orrs	r1, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d58:	0212      	lsls	r2, r2, #8
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d60:	0852      	lsrs	r2, r2, #1
 8002d62:	3a01      	subs	r2, #1
 8002d64:	0552      	lsls	r2, r2, #21
 8002d66:	4311      	orrs	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d6c:	0852      	lsrs	r2, r2, #1
 8002d6e:	3a01      	subs	r2, #1
 8002d70:	0652      	lsls	r2, r2, #25
 8002d72:	4311      	orrs	r1, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d78:	0912      	lsrs	r2, r2, #4
 8002d7a:	0452      	lsls	r2, r2, #17
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	4930      	ldr	r1, [pc, #192]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a2d      	ldr	r2, [pc, #180]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d90:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d9c:	f7fd fd08 	bl	80007b0 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fd fd04 	bl	80007b0 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e058      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db6:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dc2:	e050      	b.n	8002e66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e04f      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d148      	bne.n	8002e66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a19      	ldr	r2, [pc, #100]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002de0:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dec:	f7fd fce0 	bl	80007b0 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fd fcdc 	bl	80007b0 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e030      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x734>
 8002e12:	e028      	b.n	8002e66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d023      	beq.n	8002e62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <HAL_RCC_OscConfig+0x780>)
 8002e20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fd fcc3 	bl	80007b0 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2c:	e00c      	b.n	8002e48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fd fcbf 	bl	80007b0 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d905      	bls.n	8002e48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e013      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
 8002e40:	40021000 	.word	0x40021000
 8002e44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_OscConfig+0x7b0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ec      	bne.n	8002e2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_RCC_OscConfig+0x7b0>)
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	4905      	ldr	r1, [pc, #20]	; (8002e70 <HAL_RCC_OscConfig+0x7b0>)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_RCC_OscConfig+0x7b4>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60cb      	str	r3, [r1, #12]
 8002e60:	e001      	b.n	8002e66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	feeefffc 	.word	0xfeeefffc

08002e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0e7      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b75      	ldr	r3, [pc, #468]	; (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d910      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b72      	ldr	r3, [pc, #456]	; (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 0207 	bic.w	r2, r3, #7
 8002ea2:	4970      	ldr	r1, [pc, #448]	; (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b6e      	ldr	r3, [pc, #440]	; (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0cf      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d010      	beq.n	8002eea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b66      	ldr	r3, [pc, #408]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d908      	bls.n	8002eea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed8:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4960      	ldr	r1, [pc, #384]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d04c      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efe:	4b5a      	ldr	r3, [pc, #360]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d121      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0a6      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f16:	4b54      	ldr	r3, [pc, #336]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d115      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e09a      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f2e:	4b4e      	ldr	r3, [pc, #312]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e08e      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f3e:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e086      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f4e:	4b46      	ldr	r3, [pc, #280]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f023 0203 	bic.w	r2, r3, #3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4943      	ldr	r1, [pc, #268]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f60:	f7fd fc26 	bl	80007b0 <HAL_GetTick>
 8002f64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f68:	f7fd fc22 	bl	80007b0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e06e      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 020c 	and.w	r2, r3, #12
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d1eb      	bne.n	8002f68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d010      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	4b31      	ldr	r3, [pc, #196]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d208      	bcs.n	8002fbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fac:	4b2e      	ldr	r3, [pc, #184]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	492b      	ldr	r1, [pc, #172]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d210      	bcs.n	8002fee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 0207 	bic.w	r2, r3, #7
 8002fd4:	4923      	ldr	r1, [pc, #140]	; (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fdc:	4b21      	ldr	r3, [pc, #132]	; (8003064 <HAL_RCC_ClockConfig+0x1ec>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e036      	b.n	800305c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	4918      	ldr	r1, [pc, #96]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4910      	ldr	r1, [pc, #64]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8003028:	4313      	orrs	r3, r2
 800302a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800302c:	f000 f824 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_RCC_ClockConfig+0x1f0>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	490b      	ldr	r1, [pc, #44]	; (800306c <HAL_RCC_ClockConfig+0x1f4>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
 8003048:	4a09      	ldr	r2, [pc, #36]	; (8003070 <HAL_RCC_ClockConfig+0x1f8>)
 800304a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_RCC_ClockConfig+0x1fc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fb5d 	bl	8000710 <HAL_InitTick>
 8003056:	4603      	mov	r3, r0
 8003058:	72fb      	strb	r3, [r7, #11]

  return status;
 800305a:	7afb      	ldrb	r3, [r7, #11]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40022000 	.word	0x40022000
 8003068:	40021000 	.word	0x40021000
 800306c:	08003c38 	.word	0x08003c38
 8003070:	20000000 	.word	0x20000000
 8003074:	20000004 	.word	0x20000004

08003078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003086:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003090:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x34>
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d121      	bne.n	80030ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d11e      	bne.n	80030ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030ac:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030b8:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	e005      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030d4:	4a2b      	ldr	r2, [pc, #172]	; (8003184 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10d      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d102      	bne.n	80030f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030f0:	4b25      	ldr	r3, [pc, #148]	; (8003188 <HAL_RCC_GetSysClockFreq+0x110>)
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	e004      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030fc:	4b23      	ldr	r3, [pc, #140]	; (800318c <HAL_RCC_GetSysClockFreq+0x114>)
 80030fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d134      	bne.n	8003170 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003106:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0xa6>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d003      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0xac>
 800311c:	e005      	b.n	800312a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800311e:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <HAL_RCC_GetSysClockFreq+0x110>)
 8003120:	617b      	str	r3, [r7, #20]
      break;
 8003122:	e005      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_RCC_GetSysClockFreq+0x114>)
 8003126:	617b      	str	r3, [r7, #20]
      break;
 8003128:	e002      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	617b      	str	r3, [r7, #20]
      break;
 800312e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	3301      	adds	r3, #1
 800313c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	fb03 f202 	mul.w	r2, r3, r2
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_RCC_GetSysClockFreq+0x108>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	0e5b      	lsrs	r3, r3, #25
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	3301      	adds	r3, #1
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003170:	69bb      	ldr	r3, [r7, #24]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3724      	adds	r7, #36	; 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	08003c48 	.word	0x08003c48
 8003188:	00f42400 	.word	0x00f42400
 800318c:	007a1200 	.word	0x007a1200

08003190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800319c:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031a8:	f7ff fa26 	bl	80025f8 <HAL_PWREx_GetVoltageRange>
 80031ac:	6178      	str	r0, [r7, #20]
 80031ae:	e014      	b.n	80031da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031b0:	4b25      	ldr	r3, [pc, #148]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	4a24      	ldr	r2, [pc, #144]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ba:	6593      	str	r3, [r2, #88]	; 0x58
 80031bc:	4b22      	ldr	r3, [pc, #136]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031c8:	f7ff fa16 	bl	80025f8 <HAL_PWREx_GetVoltageRange>
 80031cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031ce:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e0:	d10b      	bne.n	80031fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d919      	bls.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2ba0      	cmp	r3, #160	; 0xa0
 80031ec:	d902      	bls.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ee:	2302      	movs	r3, #2
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	e013      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031f4:	2301      	movs	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e010      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b80      	cmp	r3, #128	; 0x80
 80031fe:	d902      	bls.n	8003206 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003200:	2303      	movs	r3, #3
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	e00a      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b80      	cmp	r3, #128	; 0x80
 800320a:	d102      	bne.n	8003212 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800320c:	2302      	movs	r3, #2
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e004      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b70      	cmp	r3, #112	; 0x70
 8003216:	d101      	bne.n	800321c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003218:	2301      	movs	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 0207 	bic.w	r2, r3, #7
 8003224:	4909      	ldr	r1, [pc, #36]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	429a      	cmp	r2, r3
 8003238:	d001      	beq.n	800323e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	40022000 	.word	0x40022000

08003250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003258:	2300      	movs	r3, #0
 800325a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800325c:	2300      	movs	r3, #0
 800325e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003268:	2b00      	cmp	r3, #0
 800326a:	d041      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003270:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003274:	d02a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003276:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800327a:	d824      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800327c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003280:	d008      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003282:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003286:	d81e      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800328c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003290:	d010      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003292:	e018      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003294:	4b86      	ldr	r3, [pc, #536]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a85      	ldr	r2, [pc, #532]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032a0:	e015      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fabb 	bl	8003824 <RCCEx_PLLSAI1_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032b2:	e00c      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3320      	adds	r3, #32
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fba6 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c4:	e003      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	74fb      	strb	r3, [r7, #19]
      break;
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d4:	4b76      	ldr	r3, [pc, #472]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e2:	4973      	ldr	r1, [pc, #460]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032ea:	e001      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d041      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003300:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003304:	d02a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003306:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800330a:	d824      	bhi.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800330c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003310:	d008      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003316:	d81e      	bhi.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800331c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003320:	d010      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003322:	e018      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003324:	4b62      	ldr	r3, [pc, #392]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a61      	ldr	r2, [pc, #388]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003330:	e015      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fa73 	bl	8003824 <RCCEx_PLLSAI1_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003342:	e00c      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3320      	adds	r3, #32
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fb5e 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003354:	e003      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	74fb      	strb	r3, [r7, #19]
      break;
 800335a:	e000      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800335c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003364:	4b52      	ldr	r3, [pc, #328]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003372:	494f      	ldr	r1, [pc, #316]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800337a:	e001      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80a0 	beq.w	80034ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a8:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	4a40      	ldr	r2, [pc, #256]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b2:	6593      	str	r3, [r2, #88]	; 0x58
 80033b4:	4b3e      	ldr	r3, [pc, #248]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c0:	2301      	movs	r3, #1
 80033c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c4:	4b3b      	ldr	r3, [pc, #236]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a3a      	ldr	r2, [pc, #232]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033d0:	f7fd f9ee 	bl	80007b0 <HAL_GetTick>
 80033d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033d6:	e009      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d8:	f7fd f9ea 	bl	80007b0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d902      	bls.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	74fb      	strb	r3, [r7, #19]
        break;
 80033ea:	e005      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ec:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ef      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d15c      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033fe:	4b2c      	ldr	r3, [pc, #176]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003408:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01f      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	429a      	cmp	r2, r3
 800341a:	d019      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800341c:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003428:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003438:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003448:	4a19      	ldr	r2, [pc, #100]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fd f9a9 	bl	80007b0 <HAL_GetTick>
 800345e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003460:	e00b      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7fd f9a5 	bl	80007b0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d902      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	74fb      	strb	r3, [r7, #19]
            break;
 8003478:	e006      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ec      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349e:	4904      	ldr	r1, [pc, #16]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034a6:	e009      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	74bb      	strb	r3, [r7, #18]
 80034ac:	e006      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034bc:	7c7b      	ldrb	r3, [r7, #17]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4b9e      	ldr	r3, [pc, #632]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	4a9d      	ldr	r2, [pc, #628]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034da:	4b98      	ldr	r3, [pc, #608]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f023 0203 	bic.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	4994      	ldr	r1, [pc, #592]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034fc:	4b8f      	ldr	r3, [pc, #572]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	f023 020c 	bic.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	498c      	ldr	r1, [pc, #560]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	4313      	orrs	r3, r2
 800350e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800351e:	4b87      	ldr	r3, [pc, #540]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	4983      	ldr	r1, [pc, #524]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003540:	4b7e      	ldr	r3, [pc, #504]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	497b      	ldr	r1, [pc, #492]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003562:	4b76      	ldr	r3, [pc, #472]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003570:	4972      	ldr	r1, [pc, #456]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003584:	4b6d      	ldr	r3, [pc, #436]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003592:	496a      	ldr	r1, [pc, #424]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a6:	4b65      	ldr	r3, [pc, #404]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b4:	4961      	ldr	r1, [pc, #388]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035c8:	4b5c      	ldr	r3, [pc, #368]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d6:	4959      	ldr	r1, [pc, #356]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ea:	4b54      	ldr	r3, [pc, #336]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f8:	4950      	ldr	r1, [pc, #320]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800360c:	4b4b      	ldr	r3, [pc, #300]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	4948      	ldr	r1, [pc, #288]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800362e:	4b43      	ldr	r3, [pc, #268]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	493f      	ldr	r1, [pc, #252]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d028      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003650:	4b3a      	ldr	r3, [pc, #232]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365e:	4937      	ldr	r1, [pc, #220]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800366e:	d106      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b32      	ldr	r3, [pc, #200]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a31      	ldr	r2, [pc, #196]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
 800367c:	e011      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003686:	d10c      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	2101      	movs	r1, #1
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f8c8 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d028      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036ae:	4b23      	ldr	r3, [pc, #140]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	491f      	ldr	r1, [pc, #124]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036cc:	d106      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4a1a      	ldr	r2, [pc, #104]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d8:	60d3      	str	r3, [r2, #12]
 80036da:	e011      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f899 	bl	8003824 <RCCEx_PLLSAI1_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02b      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371a:	4908      	ldr	r1, [pc, #32]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800372a:	d109      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a02      	ldr	r2, [pc, #8]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003736:	60d3      	str	r3, [r2, #12]
 8003738:	e014      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003748:	d10c      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	2101      	movs	r1, #1
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f867 	bl	8003824 <RCCEx_PLLSAI1_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02f      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003770:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377e:	4928      	ldr	r1, [pc, #160]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800378a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800378e:	d10d      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	2102      	movs	r1, #2
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f844 	bl	8003824 <RCCEx_PLLSAI1_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d014      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037a6:	7cfb      	ldrb	r3, [r7, #19]
 80037a8:	74bb      	strb	r3, [r7, #18]
 80037aa:	e011      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3320      	adds	r3, #32
 80037ba:	2102      	movs	r1, #2
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f925 	bl	8003a0c <RCCEx_PLLSAI2_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ea:	490d      	ldr	r1, [pc, #52]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800380e:	4904      	ldr	r1, [pc, #16]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003816:	7cbb      	ldrb	r3, [r7, #18]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000

08003824 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003832:	4b75      	ldr	r3, [pc, #468]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d018      	beq.n	8003870 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800383e:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0203 	and.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d10d      	bne.n	800386a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
       ||
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003856:	4b6c      	ldr	r3, [pc, #432]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
       ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d047      	beq.n	80038fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	e044      	b.n	80038fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d018      	beq.n	80038aa <RCCEx_PLLSAI1_Config+0x86>
 8003878:	2b03      	cmp	r3, #3
 800387a:	d825      	bhi.n	80038c8 <RCCEx_PLLSAI1_Config+0xa4>
 800387c:	2b01      	cmp	r3, #1
 800387e:	d002      	beq.n	8003886 <RCCEx_PLLSAI1_Config+0x62>
 8003880:	2b02      	cmp	r3, #2
 8003882:	d009      	beq.n	8003898 <RCCEx_PLLSAI1_Config+0x74>
 8003884:	e020      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003886:	4b60      	ldr	r3, [pc, #384]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d11d      	bne.n	80038ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003896:	e01a      	b.n	80038ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003898:	4b5b      	ldr	r3, [pc, #364]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d116      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a8:	e013      	b.n	80038d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038aa:	4b57      	ldr	r3, [pc, #348]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10f      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038b6:	4b54      	ldr	r3, [pc, #336]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038c6:	e006      	b.n	80038d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      break;
 80038cc:	e004      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ce:	bf00      	nop
 80038d0:	e002      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038d2:	bf00      	nop
 80038d4:	e000      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10d      	bne.n	80038fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038de:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6819      	ldr	r1, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	430b      	orrs	r3, r1
 80038f4:	4944      	ldr	r1, [pc, #272]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d17d      	bne.n	80039fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003900:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a40      	ldr	r2, [pc, #256]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800390a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800390c:	f7fc ff50 	bl	80007b0 <HAL_GetTick>
 8003910:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003912:	e009      	b.n	8003928 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003914:	f7fc ff4c 	bl	80007b0 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d902      	bls.n	8003928 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	73fb      	strb	r3, [r7, #15]
        break;
 8003926:	e005      	b.n	8003934 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003928:	4b37      	ldr	r3, [pc, #220]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ef      	bne.n	8003914 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d160      	bne.n	80039fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d111      	bne.n	8003964 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003940:	4b31      	ldr	r3, [pc, #196]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6892      	ldr	r2, [r2, #8]
 8003950:	0211      	lsls	r1, r2, #8
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	0912      	lsrs	r2, r2, #4
 8003958:	0452      	lsls	r2, r2, #17
 800395a:	430a      	orrs	r2, r1
 800395c:	492a      	ldr	r1, [pc, #168]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	610b      	str	r3, [r1, #16]
 8003962:	e027      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d112      	bne.n	8003990 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800396a:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003972:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6892      	ldr	r2, [r2, #8]
 800397a:	0211      	lsls	r1, r2, #8
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6912      	ldr	r2, [r2, #16]
 8003980:	0852      	lsrs	r2, r2, #1
 8003982:	3a01      	subs	r2, #1
 8003984:	0552      	lsls	r2, r2, #21
 8003986:	430a      	orrs	r2, r1
 8003988:	491f      	ldr	r1, [pc, #124]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	610b      	str	r3, [r1, #16]
 800398e:	e011      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003998:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6892      	ldr	r2, [r2, #8]
 80039a0:	0211      	lsls	r1, r2, #8
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6952      	ldr	r2, [r2, #20]
 80039a6:	0852      	lsrs	r2, r2, #1
 80039a8:	3a01      	subs	r2, #1
 80039aa:	0652      	lsls	r2, r2, #25
 80039ac:	430a      	orrs	r2, r1
 80039ae:	4916      	ldr	r1, [pc, #88]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fc fef6 	bl	80007b0 <HAL_GetTick>
 80039c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039c6:	e009      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039c8:	f7fc fef2 	bl	80007b0 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d902      	bls.n	80039dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	73fb      	strb	r3, [r7, #15]
          break;
 80039da:	e005      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ef      	beq.n	80039c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	4904      	ldr	r1, [pc, #16]	; (8003a08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000

08003a0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a1a:	4b6a      	ldr	r3, [pc, #424]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d018      	beq.n	8003a58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a26:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0203 	and.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d10d      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
       ||
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a3e:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d047      	beq.n	8003ae2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
 8003a56:	e044      	b.n	8003ae2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d018      	beq.n	8003a92 <RCCEx_PLLSAI2_Config+0x86>
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d825      	bhi.n	8003ab0 <RCCEx_PLLSAI2_Config+0xa4>
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d002      	beq.n	8003a6e <RCCEx_PLLSAI2_Config+0x62>
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d009      	beq.n	8003a80 <RCCEx_PLLSAI2_Config+0x74>
 8003a6c:	e020      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a6e:	4b55      	ldr	r3, [pc, #340]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11d      	bne.n	8003ab6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7e:	e01a      	b.n	8003ab6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d116      	bne.n	8003aba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a90:	e013      	b.n	8003aba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a92:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a9e:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aae:	e006      	b.n	8003abe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab4:	e004      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e002      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003abe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10d      	bne.n	8003ae2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	430b      	orrs	r3, r1
 8003adc:	4939      	ldr	r1, [pc, #228]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d167      	bne.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ae8:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a35      	ldr	r2, [pc, #212]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af4:	f7fc fe5c 	bl	80007b0 <HAL_GetTick>
 8003af8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003afa:	e009      	b.n	8003b10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003afc:	f7fc fe58 	bl	80007b0 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d902      	bls.n	8003b10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b0e:	e005      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b10:	4b2c      	ldr	r3, [pc, #176]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ef      	bne.n	8003afc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d14a      	bne.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d111      	bne.n	8003b4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6892      	ldr	r2, [r2, #8]
 8003b38:	0211      	lsls	r1, r2, #8
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68d2      	ldr	r2, [r2, #12]
 8003b3e:	0912      	lsrs	r2, r2, #4
 8003b40:	0452      	lsls	r2, r2, #17
 8003b42:	430a      	orrs	r2, r1
 8003b44:	491f      	ldr	r1, [pc, #124]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	614b      	str	r3, [r1, #20]
 8003b4a:	e011      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6892      	ldr	r2, [r2, #8]
 8003b5c:	0211      	lsls	r1, r2, #8
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6912      	ldr	r2, [r2, #16]
 8003b62:	0852      	lsrs	r2, r2, #1
 8003b64:	3a01      	subs	r2, #1
 8003b66:	0652      	lsls	r2, r2, #25
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b70:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7c:	f7fc fe18 	bl	80007b0 <HAL_GetTick>
 8003b80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b82:	e009      	b.n	8003b98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b84:	f7fc fe14 	bl	80007b0 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d902      	bls.n	8003b98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	73fb      	strb	r3, [r7, #15]
          break;
 8003b96:	e005      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ef      	beq.n	8003b84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bac:	695a      	ldr	r2, [r3, #20]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	4904      	ldr	r1, [pc, #16]	; (8003bc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000

08003bc8 <memset>:
 8003bc8:	4402      	add	r2, r0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d100      	bne.n	8003bd2 <memset+0xa>
 8003bd0:	4770      	bx	lr
 8003bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bd6:	e7f9      	b.n	8003bcc <memset+0x4>

08003bd8 <__libc_init_array>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	4d0d      	ldr	r5, [pc, #52]	; (8003c10 <__libc_init_array+0x38>)
 8003bdc:	4c0d      	ldr	r4, [pc, #52]	; (8003c14 <__libc_init_array+0x3c>)
 8003bde:	1b64      	subs	r4, r4, r5
 8003be0:	10a4      	asrs	r4, r4, #2
 8003be2:	2600      	movs	r6, #0
 8003be4:	42a6      	cmp	r6, r4
 8003be6:	d109      	bne.n	8003bfc <__libc_init_array+0x24>
 8003be8:	4d0b      	ldr	r5, [pc, #44]	; (8003c18 <__libc_init_array+0x40>)
 8003bea:	4c0c      	ldr	r4, [pc, #48]	; (8003c1c <__libc_init_array+0x44>)
 8003bec:	f000 f818 	bl	8003c20 <_init>
 8003bf0:	1b64      	subs	r4, r4, r5
 8003bf2:	10a4      	asrs	r4, r4, #2
 8003bf4:	2600      	movs	r6, #0
 8003bf6:	42a6      	cmp	r6, r4
 8003bf8:	d105      	bne.n	8003c06 <__libc_init_array+0x2e>
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c00:	4798      	blx	r3
 8003c02:	3601      	adds	r6, #1
 8003c04:	e7ee      	b.n	8003be4 <__libc_init_array+0xc>
 8003c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0a:	4798      	blx	r3
 8003c0c:	3601      	adds	r6, #1
 8003c0e:	e7f2      	b.n	8003bf6 <__libc_init_array+0x1e>
 8003c10:	08003c78 	.word	0x08003c78
 8003c14:	08003c78 	.word	0x08003c78
 8003c18:	08003c78 	.word	0x08003c78
 8003c1c:	08003c7c 	.word	0x08003c7c

08003c20 <_init>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	bf00      	nop
 8003c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c26:	bc08      	pop	{r3}
 8003c28:	469e      	mov	lr, r3
 8003c2a:	4770      	bx	lr

08003c2c <_fini>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	bf00      	nop
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr
