
STM32_ADC_Programming_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004180  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004308  08004308  00014308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004348  08004348  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004348  08004348  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004348  08004348  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800434c  0800434c  0001434c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  0800435c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  0800435c  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b440  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d7c  00000000  00000000  0002b4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad8  00000000  00000000  0002d240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000830  00000000  00000000  0002dd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000262ec  00000000  00000000  0002e548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb48  00000000  00000000  00054834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1fde  00000000  00000000  0006037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c24  00000000  00000000  0015235c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  00154f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042f0 	.word	0x080042f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080042f0 	.word	0x080042f0

080001c8 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t adc_data[2];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001da:	4770      	bx	lr

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e0:	f000 faca 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e4:	f000 f814 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f000 f90a 	bl	8000400 <MX_GPIO_Init>
  MX_DMA_Init();
 80001ec:	f000 f8ea 	bl	80003c4 <MX_DMA_Init>
  MX_ADC1_Init();
 80001f0:	f000 f860 	bl	80002b4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80001f4:	217f      	movs	r1, #127	; 0x7f
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <main+0x2c>)
 80001f8:	f001 ff58 	bl	80020ac <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 2);
 80001fc:	2202      	movs	r2, #2
 80001fe:	4903      	ldr	r1, [pc, #12]	; (800020c <main+0x30>)
 8000200:	4801      	ldr	r0, [pc, #4]	; (8000208 <main+0x2c>)
 8000202:	f000 fea1 	bl	8000f48 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000206:	e7fe      	b.n	8000206 <main+0x2a>
 8000208:	20000028 	.word	0x20000028
 800020c:	200000d4 	.word	0x200000d4

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b096      	sub	sp, #88	; 0x58
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2244      	movs	r2, #68	; 0x44
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f004 f83a 	bl	8004298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000232:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000236:	f002 fd55 	bl	8002ce4 <HAL_PWREx_ControlVoltageScaling>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000240:	f000 f956 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000244:	2302      	movs	r3, #2
 8000246:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800024c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000256:	2302      	movs	r3, #2
 8000258:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800025a:	2301      	movs	r3, #1
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800025e:	230a      	movs	r3, #10
 8000260:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000262:	2307      	movs	r3, #7
 8000264:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000266:	2302      	movs	r3, #2
 8000268:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800026a:	2302      	movs	r3, #2
 800026c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0314 	add.w	r3, r7, #20
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fd8c 	bl	8002d90 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800027e:	f000 f937 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2303      	movs	r3, #3
 8000288:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000296:	463b      	mov	r3, r7
 8000298:	2104      	movs	r1, #4
 800029a:	4618      	mov	r0, r3
 800029c:	f003 f954 	bl	8003548 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002a6:	f000 f923 	bl	80004f0 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3758      	adds	r7, #88	; 0x58
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08a      	sub	sp, #40	; 0x28
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002ba:	f107 031c 	add.w	r3, r7, #28
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
 80002d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d6:	4b37      	ldr	r3, [pc, #220]	; (80003b4 <MX_ADC1_Init+0x100>)
 80002d8:	4a37      	ldr	r2, [pc, #220]	; (80003b8 <MX_ADC1_Init+0x104>)
 80002da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80002dc:	4b35      	ldr	r3, [pc, #212]	; (80003b4 <MX_ADC1_Init+0x100>)
 80002de:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 80002e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002e4:	4b33      	ldr	r3, [pc, #204]	; (80003b4 <MX_ADC1_Init+0x100>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ea:	4b32      	ldr	r3, [pc, #200]	; (80003b4 <MX_ADC1_Init+0x100>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002f0:	4b30      	ldr	r3, [pc, #192]	; (80003b4 <MX_ADC1_Init+0x100>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002f6:	4b2f      	ldr	r3, [pc, #188]	; (80003b4 <MX_ADC1_Init+0x100>)
 80002f8:	2204      	movs	r2, #4
 80002fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002fc:	4b2d      	ldr	r3, [pc, #180]	; (80003b4 <MX_ADC1_Init+0x100>)
 80002fe:	2200      	movs	r2, #0
 8000300:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000302:	4b2c      	ldr	r3, [pc, #176]	; (80003b4 <MX_ADC1_Init+0x100>)
 8000304:	2201      	movs	r2, #1
 8000306:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000308:	4b2a      	ldr	r3, [pc, #168]	; (80003b4 <MX_ADC1_Init+0x100>)
 800030a:	2202      	movs	r2, #2
 800030c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800030e:	4b29      	ldr	r3, [pc, #164]	; (80003b4 <MX_ADC1_Init+0x100>)
 8000310:	2200      	movs	r2, #0
 8000312:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000316:	4b27      	ldr	r3, [pc, #156]	; (80003b4 <MX_ADC1_Init+0x100>)
 8000318:	2200      	movs	r2, #0
 800031a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800031c:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <MX_ADC1_Init+0x100>)
 800031e:	2200      	movs	r2, #0
 8000320:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000322:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <MX_ADC1_Init+0x100>)
 8000324:	2201      	movs	r2, #1
 8000326:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800032a:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <MX_ADC1_Init+0x100>)
 800032c:	2200      	movs	r2, #0
 800032e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000330:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <MX_ADC1_Init+0x100>)
 8000332:	2200      	movs	r2, #0
 8000334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000338:	481e      	ldr	r0, [pc, #120]	; (80003b4 <MX_ADC1_Init+0x100>)
 800033a:	f000 fcb5 	bl	8000ca8 <HAL_ADC_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000344:	f000 f8d4 	bl	80004f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000348:	2300      	movs	r3, #0
 800034a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800034c:	f107 031c 	add.w	r3, r7, #28
 8000350:	4619      	mov	r1, r3
 8000352:	4818      	ldr	r0, [pc, #96]	; (80003b4 <MX_ADC1_Init+0x100>)
 8000354:	f001 ff3c 	bl	80021d0 <HAL_ADCEx_MultiModeConfigChannel>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800035e:	f000 f8c7 	bl	80004f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_ADC1_Init+0x108>)
 8000364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000366:	2306      	movs	r3, #6
 8000368:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800036a:	2302      	movs	r3, #2
 800036c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800036e:	237f      	movs	r3, #127	; 0x7f
 8000370:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000372:	2304      	movs	r3, #4
 8000374:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4619      	mov	r1, r3
 800037e:	480d      	ldr	r0, [pc, #52]	; (80003b4 <MX_ADC1_Init+0x100>)
 8000380:	f001 f8d6 	bl	8001530 <HAL_ADC_ConfigChannel>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800038a:	f000 f8b1 	bl	80004f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_ADC1_Init+0x10c>)
 8000390:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000392:	230c      	movs	r3, #12
 8000394:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	4806      	ldr	r0, [pc, #24]	; (80003b4 <MX_ADC1_Init+0x100>)
 800039c:	f001 f8c8 	bl	8001530 <HAL_ADC_ConfigChannel>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80003a6:	f000 f8a3 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	3728      	adds	r7, #40	; 0x28
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000028 	.word	0x20000028
 80003b8:	50040000 	.word	0x50040000
 80003bc:	04300002 	.word	0x04300002
 80003c0:	08600004 	.word	0x08600004

080003c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_DMA_Init+0x38>)
 80003cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <MX_DMA_Init+0x38>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6493      	str	r3, [r2, #72]	; 0x48
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_DMA_Init+0x38>)
 80003d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2100      	movs	r1, #0
 80003e6:	200b      	movs	r0, #11
 80003e8:	f002 f87d 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003ec:	200b      	movs	r0, #11
 80003ee:	f002 f896 	bl	800251e <HAL_NVIC_EnableIRQ>

}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000

08000400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
 8000414:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000416:	4b34      	ldr	r3, [pc, #208]	; (80004e8 <MX_GPIO_Init+0xe8>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	4a33      	ldr	r2, [pc, #204]	; (80004e8 <MX_GPIO_Init+0xe8>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000422:	4b31      	ldr	r3, [pc, #196]	; (80004e8 <MX_GPIO_Init+0xe8>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	f003 0304 	and.w	r3, r3, #4
 800042a:	613b      	str	r3, [r7, #16]
 800042c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800042e:	4b2e      	ldr	r3, [pc, #184]	; (80004e8 <MX_GPIO_Init+0xe8>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	4a2d      	ldr	r2, [pc, #180]	; (80004e8 <MX_GPIO_Init+0xe8>)
 8000434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043a:	4b2b      	ldr	r3, [pc, #172]	; (80004e8 <MX_GPIO_Init+0xe8>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <MX_GPIO_Init+0xe8>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	4a27      	ldr	r2, [pc, #156]	; (80004e8 <MX_GPIO_Init+0xe8>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000452:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <MX_GPIO_Init+0xe8>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <MX_GPIO_Init+0xe8>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a21      	ldr	r2, [pc, #132]	; (80004e8 <MX_GPIO_Init+0xe8>)
 8000464:	f043 0302 	orr.w	r3, r3, #2
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <MX_GPIO_Init+0xe8>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0302 	and.w	r3, r3, #2
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2120      	movs	r1, #32
 800047a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047e:	f002 fc0b 	bl	8002c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000488:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800048c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000492:	f107 0314 	add.w	r3, r7, #20
 8000496:	4619      	mov	r1, r3
 8000498:	4814      	ldr	r0, [pc, #80]	; (80004ec <MX_GPIO_Init+0xec>)
 800049a:	f002 fa53 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800049e:	230c      	movs	r3, #12
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a2:	2302      	movs	r3, #2
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004aa:	2303      	movs	r3, #3
 80004ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004ae:	2307      	movs	r3, #7
 80004b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	4619      	mov	r1, r3
 80004b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004bc:	f002 fa42 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004c0:	2320      	movs	r3, #32
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	2301      	movs	r3, #1
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2300      	movs	r3, #0
 80004ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	4619      	mov	r1, r3
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f002 fa33 	bl	8002944 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004de:	bf00      	nop
 80004e0:	3728      	adds	r7, #40	; 0x28
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000
 80004ec:	48000800 	.word	0x48000800

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <Error_Handler+0x8>
	...

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <HAL_MspInit+0x44>)
 8000504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_MspInit+0x44>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6613      	str	r3, [r2, #96]	; 0x60
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_MspInit+0x44>)
 8000510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <HAL_MspInit+0x44>)
 800051c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800051e:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_MspInit+0x44>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000524:	6593      	str	r3, [r2, #88]	; 0x58
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <HAL_MspInit+0x44>)
 8000528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800052a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b0ac      	sub	sp, #176	; 0xb0
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	2288      	movs	r2, #136	; 0x88
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f003 fe97 	bl	8004298 <memset>
  if(hadc->Instance==ADC1)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a40      	ldr	r2, [pc, #256]	; (8000670 <HAL_ADC_MspInit+0x12c>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d179      	bne.n	8000668 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000574:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000578:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800057a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800057e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000586:	2301      	movs	r3, #1
 8000588:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800058a:	2308      	movs	r3, #8
 800058c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800058e:	2307      	movs	r3, #7
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800059a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800059e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 f9bb 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80005b0:	f7ff ff9e 	bl	80004f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005b4:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <HAL_ADC_MspInit+0x130>)
 80005b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b8:	4a2e      	ldr	r2, [pc, #184]	; (8000674 <HAL_ADC_MspInit+0x130>)
 80005ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <HAL_ADC_MspInit+0x130>)
 80005c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <HAL_ADC_MspInit+0x130>)
 80005ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d0:	4a28      	ldr	r2, [pc, #160]	; (8000674 <HAL_ADC_MspInit+0x130>)
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <HAL_ADC_MspInit+0x130>)
 80005da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005e4:	2303      	movs	r3, #3
 80005e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005ea:	230b      	movs	r3, #11
 80005ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005fa:	4619      	mov	r1, r3
 80005fc:	481e      	ldr	r0, [pc, #120]	; (8000678 <HAL_ADC_MspInit+0x134>)
 80005fe:	f002 f9a1 	bl	8002944 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000602:	4b1e      	ldr	r3, [pc, #120]	; (800067c <HAL_ADC_MspInit+0x138>)
 8000604:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <HAL_ADC_MspInit+0x13c>)
 8000606:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <HAL_ADC_MspInit+0x138>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800060e:	4b1b      	ldr	r3, [pc, #108]	; (800067c <HAL_ADC_MspInit+0x138>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_ADC_MspInit+0x138>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <HAL_ADC_MspInit+0x138>)
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <HAL_ADC_MspInit+0x138>)
 8000622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000626:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <HAL_ADC_MspInit+0x138>)
 800062a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800062e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_ADC_MspInit+0x138>)
 8000632:	2220      	movs	r2, #32
 8000634:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <HAL_ADC_MspInit+0x138>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800063c:	480f      	ldr	r0, [pc, #60]	; (800067c <HAL_ADC_MspInit+0x138>)
 800063e:	f001 ff89 	bl	8002554 <HAL_DMA_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000648:	f7ff ff52 	bl	80004f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a0b      	ldr	r2, [pc, #44]	; (800067c <HAL_ADC_MspInit+0x138>)
 8000650:	64da      	str	r2, [r3, #76]	; 0x4c
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <HAL_ADC_MspInit+0x138>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	2012      	movs	r0, #18
 800065e:	f001 ff42 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000662:	2012      	movs	r0, #18
 8000664:	f001 ff5b 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000668:	bf00      	nop
 800066a:	37b0      	adds	r7, #176	; 0xb0
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	50040000 	.word	0x50040000
 8000674:	40021000 	.word	0x40021000
 8000678:	48000800 	.word	0x48000800
 800067c:	2000008c 	.word	0x2000008c
 8000680:	40020008 	.word	0x40020008

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler+0x4>

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 f8ae 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <DMA1_Channel1_IRQHandler+0x10>)
 80006de:	f002 f851 	bl	8002784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000008c 	.word	0x2000008c

080006ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <ADC1_2_IRQHandler+0x10>)
 80006f2:	f000 fce5 	bl	80010c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000028 	.word	0x20000028

08000700 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <SystemInit+0x20>)
 8000706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <SystemInit+0x20>)
 800070c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800075c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000728:	f7ff ffea 	bl	8000700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <LoopForever+0x6>)
  ldr r1, =_edata
 800072e:	490d      	ldr	r1, [pc, #52]	; (8000764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <LoopForever+0xe>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000734:	e002      	b.n	800073c <LoopCopyDataInit>

08000736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073a:	3304      	adds	r3, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800073c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000740:	d3f9      	bcc.n	8000736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000744:	4c0a      	ldr	r4, [pc, #40]	; (8000770 <LoopForever+0x16>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000748:	e001      	b.n	800074e <LoopFillZerobss>

0800074a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800074c:	3204      	adds	r2, #4

0800074e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000750:	d3fb      	bcc.n	800074a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000752:	f003 fda9 	bl	80042a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000756:	f7ff fd41 	bl	80001dc <main>

0800075a <LoopForever>:

LoopForever:
    b LoopForever
 800075a:	e7fe      	b.n	800075a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800075c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000768:	08004350 	.word	0x08004350
  ldr r2, =_sbss
 800076c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000770:	200000dc 	.word	0x200000dc

08000774 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC3_IRQHandler>
	...

08000778 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800077e:	2300      	movs	r3, #0
 8000780:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_Init+0x3c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <HAL_Init+0x3c>)
 8000788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078e:	2003      	movs	r0, #3
 8000790:	f001 fe9e 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000794:	2000      	movs	r0, #0
 8000796:	f000 f80f 	bl	80007b8 <HAL_InitTick>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80007a0:	2301      	movs	r3, #1
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	e001      	b.n	80007aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007a6:	f7ff fea9 	bl	80004fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40022000 	.word	0x40022000

080007b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007c0:	2300      	movs	r3, #0
 80007c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <HAL_InitTick+0x6c>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d023      	beq.n	8000814 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <HAL_InitTick+0x70>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_InitTick+0x6c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007da:	fbb3 f3f1 	udiv	r3, r3, r1
 80007de:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fea9 	bl	800253a <HAL_SYSTICK_Config>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10f      	bne.n	800080e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b0f      	cmp	r3, #15
 80007f2:	d809      	bhi.n	8000808 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f4:	2200      	movs	r2, #0
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f001 fe73 	bl	80024e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_InitTick+0x74>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	e007      	b.n	8000818 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
 800080c:	e004      	b.n	8000818 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	73fb      	strb	r3, [r7, #15]
 8000812:	e001      	b.n	8000818 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000008 	.word	0x20000008
 8000828:	20000000 	.word	0x20000000
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x20>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x24>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_IncTick+0x24>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000008 	.word	0x20000008
 8000854:	200000d8 	.word	0x200000d8

08000858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_GetTick+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	200000d8 	.word	0x200000d8

08000870 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	431a      	orrs	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	609a      	str	r2, [r3, #8]
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	431a      	orrs	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	609a      	str	r2, [r3, #8]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80008d8:	b480      	push	{r7}
 80008da:	b087      	sub	sp, #28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3360      	adds	r3, #96	; 0x60
 80008ea:	461a      	mov	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4413      	add	r3, r2
 80008f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <LL_ADC_SetOffset+0x44>)
 80008fa:	4013      	ands	r3, r2
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	430a      	orrs	r2, r1
 8000906:	4313      	orrs	r3, r2
 8000908:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000910:	bf00      	nop
 8000912:	371c      	adds	r7, #28
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	03fff000 	.word	0x03fff000

08000920 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3360      	adds	r3, #96	; 0x60
 800092e:	461a      	mov	r2, r3
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000940:	4618      	mov	r0, r3
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800094c:	b480      	push	{r7}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	3360      	adds	r3, #96	; 0x60
 800095c:	461a      	mov	r2, r3
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	431a      	orrs	r2, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000976:	bf00      	nop
 8000978:	371c      	adds	r7, #28
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b087      	sub	sp, #28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3330      	adds	r3, #48	; 0x30
 80009b8:	461a      	mov	r2, r3
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	f003 030c 	and.w	r3, r3, #12
 80009c4:	4413      	add	r3, r2
 80009c6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	f003 031f 	and.w	r3, r3, #31
 80009d2:	211f      	movs	r1, #31
 80009d4:	fa01 f303 	lsl.w	r3, r1, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	401a      	ands	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	0e9b      	lsrs	r3, r3, #26
 80009e0:	f003 011f 	and.w	r1, r3, #31
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	f003 031f 	and.w	r3, r3, #31
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	431a      	orrs	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009f4:	bf00      	nop
 80009f6:	371c      	adds	r7, #28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d101      	bne.n	8000a18 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b087      	sub	sp, #28
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	3314      	adds	r3, #20
 8000a36:	461a      	mov	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	0e5b      	lsrs	r3, r3, #25
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	4413      	add	r3, r2
 8000a44:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	0d1b      	lsrs	r3, r3, #20
 8000a4e:	f003 031f 	and.w	r3, r3, #31
 8000a52:	2107      	movs	r1, #7
 8000a54:	fa01 f303 	lsl.w	r3, r1, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	0d1b      	lsrs	r3, r3, #20
 8000a60:	f003 031f 	and.w	r3, r3, #31
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a70:	bf00      	nop
 8000a72:	371c      	adds	r7, #28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a94:	43db      	mvns	r3, r3
 8000a96:	401a      	ands	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0318 	and.w	r3, r3, #24
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000aa0:	40d9      	lsrs	r1, r3
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	400b      	ands	r3, r1
 8000aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	0007ffff 	.word	0x0007ffff

08000ac4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f003 031f 	and.w	r3, r3, #31
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	6093      	str	r3, [r2, #8]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b34:	d101      	bne.n	8000b3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b84:	d101      	bne.n	8000b8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000b86:	2301      	movs	r3, #1
 8000b88:	e000      	b.n	8000b8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bac:	f043 0201 	orr.w	r2, r3, #1
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000bd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000bd4:	f043 0202 	orr.w	r2, r3, #2
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d101      	bne.n	8000c00 <LL_ADC_IsEnabled+0x18>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e000      	b.n	8000c02 <LL_ADC_IsEnabled+0x1a>
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d101      	bne.n	8000c26 <LL_ADC_IsDisableOngoing+0x18>
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <LL_ADC_IsDisableOngoing+0x1a>
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000c44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c48:	f043 0204 	orr.w	r2, r3, #4
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d101      	bne.n	8000c74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e000      	b.n	8000c76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	2b08      	cmp	r3, #8
 8000c94:	d101      	bne.n	8000c9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e130      	b.n	8000f24 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d109      	bne.n	8000ce4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fc37 	bl	8000544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff19 	bl	8000b20 <LL_ADC_IsDeepPowerDownEnabled>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff feff 	bl	8000afc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff34 	bl	8000b70 <LL_ADC_IsInternalRegulatorEnabled>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d115      	bne.n	8000d3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff18 	bl	8000b48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d18:	4b84      	ldr	r3, [pc, #528]	; (8000f2c <HAL_ADC_Init+0x284>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	099b      	lsrs	r3, r3, #6
 8000d1e:	4a84      	ldr	r2, [pc, #528]	; (8000f30 <HAL_ADC_Init+0x288>)
 8000d20:	fba2 2303 	umull	r2, r3, r2, r3
 8000d24:	099b      	lsrs	r3, r3, #6
 8000d26:	3301      	adds	r3, #1
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d2c:	e002      	b.n	8000d34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f9      	bne.n	8000d2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff16 	bl	8000b70 <LL_ADC_IsInternalRegulatorEnabled>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10d      	bne.n	8000d66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d4e:	f043 0210 	orr.w	r2, r3, #16
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	f043 0201 	orr.w	r2, r3, #1
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff76 	bl	8000c5c <LL_ADC_REG_IsConversionOngoing>
 8000d70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f040 80c9 	bne.w	8000f12 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 80c5 	bne.w	8000f12 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d90:	f043 0202 	orr.w	r2, r3, #2
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff23 	bl	8000be8 <LL_ADC_IsEnabled>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d115      	bne.n	8000dd4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000da8:	4862      	ldr	r0, [pc, #392]	; (8000f34 <HAL_ADC_Init+0x28c>)
 8000daa:	f7ff ff1d 	bl	8000be8 <LL_ADC_IsEnabled>
 8000dae:	4604      	mov	r4, r0
 8000db0:	4861      	ldr	r0, [pc, #388]	; (8000f38 <HAL_ADC_Init+0x290>)
 8000db2:	f7ff ff19 	bl	8000be8 <LL_ADC_IsEnabled>
 8000db6:	4603      	mov	r3, r0
 8000db8:	431c      	orrs	r4, r3
 8000dba:	4860      	ldr	r0, [pc, #384]	; (8000f3c <HAL_ADC_Init+0x294>)
 8000dbc:	f7ff ff14 	bl	8000be8 <LL_ADC_IsEnabled>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4323      	orrs	r3, r4
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d105      	bne.n	8000dd4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	485c      	ldr	r0, [pc, #368]	; (8000f40 <HAL_ADC_Init+0x298>)
 8000dd0:	f7ff fd4e 	bl	8000870 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	7e5b      	ldrb	r3, [r3, #25]
 8000dd8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000dde:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000de4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000dea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d106      	bne.n	8000e10 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e06:	3b01      	subs	r3, #1
 8000e08:	045b      	lsls	r3, r3, #17
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d009      	beq.n	8000e2c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <HAL_ADC_Init+0x29c>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	69b9      	ldr	r1, [r7, #24]
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff1c 	bl	8000c82 <LL_ADC_INJ_IsConversionOngoing>
 8000e4a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d13d      	bne.n	8000ece <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d13a      	bne.n	8000ece <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e5c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e64:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e74:	f023 0302 	bic.w	r3, r3, #2
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	69b9      	ldr	r1, [r7, #24]
 8000e7e:	430b      	orrs	r3, r1
 8000e80:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d118      	bne.n	8000ebe <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000e96:	f023 0304 	bic.w	r3, r3, #4
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ea2:	4311      	orrs	r1, r2
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ea8:	4311      	orrs	r1, r2
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0201 	orr.w	r2, r2, #1
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	e007      	b.n	8000ece <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0201 	bic.w	r2, r2, #1
 8000ecc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f023 010f 	bic.w	r1, r3, #15
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	1e5a      	subs	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
 8000eee:	e007      	b.n	8000f00 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 020f 	bic.w	r2, r2, #15
 8000efe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f04:	f023 0303 	bic.w	r3, r3, #3
 8000f08:	f043 0201 	orr.w	r2, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	655a      	str	r2, [r3, #84]	; 0x54
 8000f10:	e007      	b.n	8000f22 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f16:	f043 0210 	orr.w	r2, r3, #16
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f22:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3724      	adds	r7, #36	; 0x24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	053e2d63 	.word	0x053e2d63
 8000f34:	50040000 	.word	0x50040000
 8000f38:	50040100 	.word	0x50040100
 8000f3c:	50040200 	.word	0x50040200
 8000f40:	50040300 	.word	0x50040300
 8000f44:	fff0c007 	.word	0xfff0c007

08000f48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f54:	4853      	ldr	r0, [pc, #332]	; (80010a4 <HAL_ADC_Start_DMA+0x15c>)
 8000f56:	f7ff fdb5 	bl	8000ac4 <LL_ADC_GetMultimode>
 8000f5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fe7b 	bl	8000c5c <LL_ADC_REG_IsConversionOngoing>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f040 8093 	bne.w	8001094 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <HAL_ADC_Start_DMA+0x34>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e08e      	b.n	800109a <HAL_ADC_Start_DMA+0x152>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a47      	ldr	r2, [pc, #284]	; (80010a8 <HAL_ADC_Start_DMA+0x160>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d008      	beq.n	8000fa0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d002      	beq.n	8000fa0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	2b09      	cmp	r3, #9
 8000f9e:	d172      	bne.n	8001086 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f000 feb7 	bl	8001d14 <ADC_Enable>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d165      	bne.n	800107c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fb8:	f023 0301 	bic.w	r3, r3, #1
 8000fbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a38      	ldr	r2, [pc, #224]	; (80010ac <HAL_ADC_Start_DMA+0x164>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d002      	beq.n	8000fd4 <HAL_ADC_Start_DMA+0x8c>
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	e000      	b.n	8000fd6 <HAL_ADC_Start_DMA+0x8e>
 8000fd4:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <HAL_ADC_Start_DMA+0x168>)
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d002      	beq.n	8000fe4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d105      	bne.n	8000ff0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001000:	f023 0206 	bic.w	r2, r3, #6
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	659a      	str	r2, [r3, #88]	; 0x58
 8001008:	e002      	b.n	8001010 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2200      	movs	r2, #0
 800100e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <HAL_ADC_Start_DMA+0x16c>)
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101c:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <HAL_ADC_Start_DMA+0x170>)
 800101e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	4a25      	ldr	r2, [pc, #148]	; (80010bc <HAL_ADC_Start_DMA+0x174>)
 8001026:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	221c      	movs	r2, #28
 800102e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0210 	orr.w	r2, r2, #16
 8001046:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0201 	orr.w	r2, r2, #1
 8001056:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3340      	adds	r3, #64	; 0x40
 8001062:	4619      	mov	r1, r3
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f001 fb2c 	bl	80026c4 <HAL_DMA_Start_IT>
 800106c:	4603      	mov	r3, r0
 800106e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fddd 	bl	8000c34 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800107a:	e00d      	b.n	8001098 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001084:	e008      	b.n	8001098 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001092:	e001      	b.n	8001098 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001094:	2302      	movs	r3, #2
 8001096:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001098:	7dfb      	ldrb	r3, [r7, #23]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	50040300 	.word	0x50040300
 80010a8:	50040200 	.word	0x50040200
 80010ac:	50040100 	.word	0x50040100
 80010b0:	50040000 	.word	0x50040000
 80010b4:	08001edf 	.word	0x08001edf
 80010b8:	08001fb7 	.word	0x08001fb7
 80010bc:	08001fd3 	.word	0x08001fd3

080010c0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010dc:	4882      	ldr	r0, [pc, #520]	; (80012e8 <HAL_ADC_IRQHandler+0x228>)
 80010de:	f7ff fcf1 	bl	8000ac4 <LL_ADC_GetMultimode>
 80010e2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d017      	beq.n	800111e <HAL_ADC_IRQHandler+0x5e>
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d012      	beq.n	800111e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	2b00      	cmp	r3, #0
 8001102:	d105      	bne.n	8001110 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001108:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f001 f853 	bl	80021bc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2202      	movs	r2, #2
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <HAL_ADC_IRQHandler+0x72>
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10a      	bne.n	8001148 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 8083 	beq.w	8001244 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	2b00      	cmp	r3, #0
 8001146:	d07d      	beq.n	8001244 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	2b00      	cmp	r3, #0
 8001152:	d105      	bne.n	8001160 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001158:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fc0c 	bl	8000982 <LL_ADC_REG_IsTriggerSourceSWStart>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d062      	beq.n	8001236 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a5d      	ldr	r2, [pc, #372]	; (80012ec <HAL_ADC_IRQHandler+0x22c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d002      	beq.n	8001180 <HAL_ADC_IRQHandler+0xc0>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	e000      	b.n	8001182 <HAL_ADC_IRQHandler+0xc2>
 8001180:	4b5b      	ldr	r3, [pc, #364]	; (80012f0 <HAL_ADC_IRQHandler+0x230>)
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	4293      	cmp	r3, r2
 8001188:	d008      	beq.n	800119c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b05      	cmp	r3, #5
 8001194:	d002      	beq.n	800119c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b09      	cmp	r3, #9
 800119a:	d104      	bne.n	80011a6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	623b      	str	r3, [r7, #32]
 80011a4:	e00c      	b.n	80011c0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a50      	ldr	r2, [pc, #320]	; (80012ec <HAL_ADC_IRQHandler+0x22c>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d002      	beq.n	80011b6 <HAL_ADC_IRQHandler+0xf6>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	e000      	b.n	80011b8 <HAL_ADC_IRQHandler+0xf8>
 80011b6:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <HAL_ADC_IRQHandler+0x230>)
 80011b8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d135      	bne.n	8001236 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d12e      	bne.n	8001236 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fd3d 	bl	8000c5c <LL_ADC_REG_IsConversionOngoing>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d11a      	bne.n	800121e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 020c 	bic.w	r2, r2, #12
 80011f6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d112      	bne.n	8001236 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001214:	f043 0201 	orr.w	r2, r3, #1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	655a      	str	r2, [r3, #84]	; 0x54
 800121c:	e00b      	b.n	8001236 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001222:	f043 0210 	orr.w	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	f043 0201 	orr.w	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7fe ffc6 	bl	80001c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	220c      	movs	r2, #12
 8001242:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	2b00      	cmp	r3, #0
 800124c:	d004      	beq.n	8001258 <HAL_ADC_IRQHandler+0x198>
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	f003 0320 	and.w	r3, r3, #32
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10b      	bne.n	8001270 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 809f 	beq.w	80013a2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8099 	beq.w	80013a2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001280:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fbb7 	bl	8000a00 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001292:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fb72 	bl	8000982 <LL_ADC_REG_IsTriggerSourceSWStart>
 800129e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a11      	ldr	r2, [pc, #68]	; (80012ec <HAL_ADC_IRQHandler+0x22c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d002      	beq.n	80012b0 <HAL_ADC_IRQHandler+0x1f0>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	e000      	b.n	80012b2 <HAL_ADC_IRQHandler+0x1f2>
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_ADC_IRQHandler+0x230>)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d008      	beq.n	80012cc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d002      	beq.n	80012cc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	d104      	bne.n	80012d6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	e013      	b.n	80012fe <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_ADC_IRQHandler+0x22c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d009      	beq.n	80012f4 <HAL_ADC_IRQHandler+0x234>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	e007      	b.n	80012f6 <HAL_ADC_IRQHandler+0x236>
 80012e6:	bf00      	nop
 80012e8:	50040300 	.word	0x50040300
 80012ec:	50040100 	.word	0x50040100
 80012f0:	50040000 	.word	0x50040000
 80012f4:	4b7d      	ldr	r3, [pc, #500]	; (80014ec <HAL_ADC_IRQHandler+0x42c>)
 80012f6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d047      	beq.n	8001394 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <HAL_ADC_IRQHandler+0x25e>
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d03f      	beq.n	8001394 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800131a:	2b00      	cmp	r3, #0
 800131c:	d13a      	bne.n	8001394 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001328:	2b40      	cmp	r3, #64	; 0x40
 800132a:	d133      	bne.n	8001394 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d12e      	bne.n	8001394 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fca1 	bl	8000c82 <LL_ADC_INJ_IsConversionOngoing>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d11a      	bne.n	800137c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001354:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136a:	2b00      	cmp	r3, #0
 800136c:	d112      	bne.n	8001394 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	f043 0201 	orr.w	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
 800137a:	e00b      	b.n	8001394 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001380:	f043 0210 	orr.w	r2, r3, #16
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fee9 	bl	800216c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2260      	movs	r2, #96	; 0x60
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d011      	beq.n	80013d0 <HAL_ADC_IRQHandler+0x310>
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00c      	beq.n	80013d0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f8a0 	bl	8001508 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d012      	beq.n	8001400 <HAL_ADC_IRQHandler+0x340>
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00d      	beq.n	8001400 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 fecf 	bl	8002194 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001406:	2b00      	cmp	r3, #0
 8001408:	d012      	beq.n	8001430 <HAL_ADC_IRQHandler+0x370>
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00d      	beq.n	8001430 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001418:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fec1 	bl	80021a8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	2b00      	cmp	r3, #0
 8001438:	d036      	beq.n	80014a8 <HAL_ADC_IRQHandler+0x3e8>
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	f003 0310 	and.w	r3, r3, #16
 8001440:	2b00      	cmp	r3, #0
 8001442:	d031      	beq.n	80014a8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800144c:	2301      	movs	r3, #1
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
 8001450:	e014      	b.n	800147c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001458:	4825      	ldr	r0, [pc, #148]	; (80014f0 <HAL_ADC_IRQHandler+0x430>)
 800145a:	f7ff fb41 	bl	8000ae0 <LL_ADC_GetMultiDMATransfer>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00b      	beq.n	800147c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001464:	2301      	movs	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
 8001468:	e008      	b.n	800147c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001478:	2301      	movs	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	2b01      	cmp	r3, #1
 8001480:	d10e      	bne.n	80014a0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001486:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	f043 0202 	orr.w	r2, r3, #2
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f83e 	bl	800151c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2210      	movs	r2, #16
 80014a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d018      	beq.n	80014e4 <HAL_ADC_IRQHandler+0x424>
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	f043 0208 	orr.w	r2, r3, #8
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014dc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fe4e 	bl	8002180 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	50040000 	.word	0x50040000
 80014f0:	50040300 	.word	0x50040300

080014f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b0b6      	sub	sp, #216	; 0xd8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x22>
 800154e:	2302      	movs	r3, #2
 8001550:	e3c9      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x7b6>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fb7c 	bl	8000c5c <LL_ADC_REG_IsConversionOngoing>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 83aa 	bne.w	8001cc0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b05      	cmp	r3, #5
 800157a:	d824      	bhi.n	80015c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	3b02      	subs	r3, #2
 8001582:	2b03      	cmp	r3, #3
 8001584:	d81b      	bhi.n	80015be <HAL_ADC_ConfigChannel+0x8e>
 8001586:	a201      	add	r2, pc, #4	; (adr r2, 800158c <HAL_ADC_ConfigChannel+0x5c>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	0800159d 	.word	0x0800159d
 8001590:	080015a5 	.word	0x080015a5
 8001594:	080015ad 	.word	0x080015ad
 8001598:	080015b5 	.word	0x080015b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800159c:	230c      	movs	r3, #12
 800159e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80015a2:	e010      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80015a4:	2312      	movs	r3, #18
 80015a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80015aa:	e00c      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80015ac:	2318      	movs	r3, #24
 80015ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80015b2:	e008      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80015b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80015bc:	e003      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80015be:	2306      	movs	r3, #6
 80015c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80015c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80015d4:	f7ff f9e8 	bl	80009a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fb3d 	bl	8000c5c <LL_ADC_REG_IsConversionOngoing>
 80015e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fb49 	bl	8000c82 <LL_ADC_INJ_IsConversionOngoing>
 80015f0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f040 81a4 	bne.w	8001946 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 819f 	bne.w	8001946 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	461a      	mov	r2, r3
 8001616:	f7ff fa06 	bl	8000a26 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b04      	cmp	r3, #4
 800163a:	d00a      	beq.n	8001652 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	6919      	ldr	r1, [r3, #16]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800164c:	f7ff f944 	bl	80008d8 <LL_ADC_SetOffset>
 8001650:	e179      	b.n	8001946 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff f961 	bl	8000920 <LL_ADC_GetOffsetChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10a      	bne.n	800167e <HAL_ADC_ConfigChannel+0x14e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff f956 	bl	8000920 <LL_ADC_GetOffsetChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	0e9b      	lsrs	r3, r3, #26
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	e01e      	b.n	80016bc <HAL_ADC_ConfigChannel+0x18c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff f94b 	bl	8000920 <LL_ADC_GetOffsetChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800169c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80016ac:	2320      	movs	r3, #32
 80016ae:	e004      	b.n	80016ba <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80016b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d105      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x1a4>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	0e9b      	lsrs	r3, r3, #26
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	e018      	b.n	8001706 <HAL_ADC_ConfigChannel+0x1d6>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016e0:	fa93 f3a3 	rbit	r3, r3
 80016e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80016e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80016f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80016f8:	2320      	movs	r3, #32
 80016fa:	e004      	b.n	8001706 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80016fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001706:	429a      	cmp	r2, r3
 8001708:	d106      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f91a 	bl	800094c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2101      	movs	r1, #1
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f8fe 	bl	8000920 <LL_ADC_GetOffsetChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10a      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x214>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2101      	movs	r1, #1
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff f8f3 	bl	8000920 <LL_ADC_GetOffsetChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	0e9b      	lsrs	r3, r3, #26
 800173e:	f003 021f 	and.w	r2, r3, #31
 8001742:	e01e      	b.n	8001782 <HAL_ADC_ConfigChannel+0x252>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f8e8 	bl	8000920 <LL_ADC_GetOffsetChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001762:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800176a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001772:	2320      	movs	r3, #32
 8001774:	e004      	b.n	8001780 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001776:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178a:	2b00      	cmp	r3, #0
 800178c:	d105      	bne.n	800179a <HAL_ADC_ConfigChannel+0x26a>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	0e9b      	lsrs	r3, r3, #26
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	e018      	b.n	80017cc <HAL_ADC_ConfigChannel+0x29c>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80017ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80017b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80017be:	2320      	movs	r3, #32
 80017c0:	e004      	b.n	80017cc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80017c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d106      	bne.n	80017de <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2200      	movs	r2, #0
 80017d6:	2101      	movs	r1, #1
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff f8b7 	bl	800094c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2102      	movs	r1, #2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff f89b 	bl	8000920 <LL_ADC_GetOffsetChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10a      	bne.n	800180a <HAL_ADC_ConfigChannel+0x2da>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2102      	movs	r1, #2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f890 	bl	8000920 <LL_ADC_GetOffsetChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	0e9b      	lsrs	r3, r3, #26
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	e01e      	b.n	8001848 <HAL_ADC_ConfigChannel+0x318>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2102      	movs	r1, #2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff f885 	bl	8000920 <LL_ADC_GetOffsetChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800182c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001830:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001838:	2320      	movs	r3, #32
 800183a:	e004      	b.n	8001846 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800183c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001840:	fab3 f383 	clz	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001850:	2b00      	cmp	r3, #0
 8001852:	d105      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x330>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0e9b      	lsrs	r3, r3, #26
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	e014      	b.n	800188a <HAL_ADC_ConfigChannel+0x35a>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001868:	fa93 f3a3 	rbit	r3, r3
 800186c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800186e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800187c:	2320      	movs	r3, #32
 800187e:	e004      	b.n	800188a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001880:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800188a:	429a      	cmp	r2, r3
 800188c:	d106      	bne.n	800189c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	2102      	movs	r1, #2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f858 	bl	800094c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2103      	movs	r1, #3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f83c 	bl	8000920 <LL_ADC_GetOffsetChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10a      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x398>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2103      	movs	r1, #3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff f831 	bl	8000920 <LL_ADC_GetOffsetChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	0e9b      	lsrs	r3, r3, #26
 80018c2:	f003 021f 	and.w	r2, r3, #31
 80018c6:	e017      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x3c8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2103      	movs	r1, #3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f826 	bl	8000920 <LL_ADC_GetOffsetChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80018e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018e2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80018e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80018ea:	2320      	movs	r3, #32
 80018ec:	e003      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80018ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001900:	2b00      	cmp	r3, #0
 8001902:	d105      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x3e0>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0e9b      	lsrs	r3, r3, #26
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	e011      	b.n	8001934 <HAL_ADC_ConfigChannel+0x404>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800191e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001920:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001928:	2320      	movs	r3, #32
 800192a:	e003      	b.n	8001934 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800192c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001934:	429a      	cmp	r2, r3
 8001936:	d106      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2200      	movs	r2, #0
 800193e:	2103      	movs	r1, #3
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff f803 	bl	800094c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f94c 	bl	8000be8 <LL_ADC_IsEnabled>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 8140 	bne.w	8001bd8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	461a      	mov	r2, r3
 8001966:	f7ff f889 	bl	8000a7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4a8f      	ldr	r2, [pc, #572]	; (8001bac <HAL_ADC_ConfigChannel+0x67c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	f040 8131 	bne.w	8001bd8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10b      	bne.n	800199e <HAL_ADC_ConfigChannel+0x46e>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0e9b      	lsrs	r3, r3, #26
 800198c:	3301      	adds	r3, #1
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	2b09      	cmp	r3, #9
 8001994:	bf94      	ite	ls
 8001996:	2301      	movls	r3, #1
 8001998:	2300      	movhi	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	e019      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x4a2>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80019ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80019b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80019b6:	2320      	movs	r3, #32
 80019b8:	e003      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80019ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	3301      	adds	r3, #1
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	2b09      	cmp	r3, #9
 80019ca:	bf94      	ite	ls
 80019cc:	2301      	movls	r3, #1
 80019ce:	2300      	movhi	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d079      	beq.n	8001aca <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x4c2>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0e9b      	lsrs	r3, r3, #26
 80019e8:	3301      	adds	r3, #1
 80019ea:	069b      	lsls	r3, r3, #26
 80019ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019f0:	e015      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x4ee>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a02:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	e003      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	069b      	lsls	r3, r3, #26
 8001a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x50e>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	3301      	adds	r3, #1
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	e017      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x53e>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001a56:	2320      	movs	r3, #32
 8001a58:	e003      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	3301      	adds	r3, #1
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	2101      	movs	r1, #1
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	ea42 0103 	orr.w	r1, r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10a      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x564>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0e9b      	lsrs	r3, r3, #26
 8001a84:	3301      	adds	r3, #1
 8001a86:	f003 021f 	and.w	r2, r3, #31
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	051b      	lsls	r3, r3, #20
 8001a92:	e018      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x596>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001aac:	2320      	movs	r3, #32
 8001aae:	e003      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f003 021f 	and.w	r2, r3, #31
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	e081      	b.n	8001bce <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d107      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x5b6>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0e9b      	lsrs	r3, r3, #26
 8001adc:	3301      	adds	r3, #1
 8001ade:	069b      	lsls	r3, r3, #26
 8001ae0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ae4:	e015      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x5e2>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001afe:	2320      	movs	r3, #32
 8001b00:	e003      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	069b      	lsls	r3, r3, #26
 8001b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x602>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0e9b      	lsrs	r3, r3, #26
 8001b24:	3301      	adds	r3, #1
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	e017      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x632>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	61bb      	str	r3, [r7, #24]
  return result;
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	e003      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	ea42 0103 	orr.w	r1, r2, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10d      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x65e>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0e9b      	lsrs	r3, r3, #26
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f003 021f 	and.w	r2, r3, #31
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	3b1e      	subs	r3, #30
 8001b86:	051b      	lsls	r3, r3, #20
 8001b88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	e01e      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x69c>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	60fb      	str	r3, [r7, #12]
  return result;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d104      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	e006      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x688>
 8001baa:	bf00      	nop
 8001bac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f003 021f 	and.w	r2, r3, #31
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3b1e      	subs	r3, #30
 8001bc6:	051b      	lsls	r3, r3, #20
 8001bc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bcc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7fe ff27 	bl	8000a26 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d07a      	beq.n	8001cda <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001be4:	4843      	ldr	r0, [pc, #268]	; (8001cf4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001be6:	f7fe fe69 	bl	80008bc <LL_ADC_GetCommonPathInternalCh>
 8001bea:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a41      	ldr	r2, [pc, #260]	; (8001cf8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d12c      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d126      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a3c      	ldr	r2, [pc, #240]	; (8001cfc <HAL_ADC_ConfigChannel+0x7cc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <HAL_ADC_ConfigChannel+0x6e8>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a3b      	ldr	r2, [pc, #236]	; (8001d00 <HAL_ADC_ConfigChannel+0x7d0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d15d      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c20:	4619      	mov	r1, r3
 8001c22:	4834      	ldr	r0, [pc, #208]	; (8001cf4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c24:	f7fe fe37 	bl	8000896 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c28:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <HAL_ADC_ConfigChannel+0x7d4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	4a36      	ldr	r2, [pc, #216]	; (8001d08 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c42:	e002      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f9      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c50:	e040      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2d      	ldr	r2, [pc, #180]	; (8001d0c <HAL_ADC_ConfigChannel+0x7dc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d118      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d112      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a23      	ldr	r2, [pc, #140]	; (8001cfc <HAL_ADC_ConfigChannel+0x7cc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_ADC_ConfigChannel+0x74c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a22      	ldr	r2, [pc, #136]	; (8001d00 <HAL_ADC_ConfigChannel+0x7d0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d12d      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c84:	4619      	mov	r1, r3
 8001c86:	481b      	ldr	r0, [pc, #108]	; (8001cf4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001c88:	f7fe fe05 	bl	8000896 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c8c:	e024      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_ADC_ConfigChannel+0x7e0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d120      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d11a      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <HAL_ADC_ConfigChannel+0x7cc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d115      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001cba:	f7fe fdec 	bl	8000896 <LL_ADC_SetCommonPathInternalCh>
 8001cbe:	e00c      	b.n	8001cda <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001cd2:	e002      	b.n	8001cda <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cd4:	bf00      	nop
 8001cd6:	e000      	b.n	8001cda <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ce2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	37d8      	adds	r7, #216	; 0xd8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	80080000 	.word	0x80080000
 8001cf4:	50040300 	.word	0x50040300
 8001cf8:	c7520000 	.word	0xc7520000
 8001cfc:	50040000 	.word	0x50040000
 8001d00:	50040200 	.word	0x50040200
 8001d04:	20000000 	.word	0x20000000
 8001d08:	053e2d63 	.word	0x053e2d63
 8001d0c:	cb840000 	.word	0xcb840000
 8001d10:	80000001 	.word	0x80000001

08001d14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe ff5f 	bl	8000be8 <LL_ADC_IsEnabled>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d169      	bne.n	8001e04 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <ADC_Enable+0xfc>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00d      	beq.n	8001d5a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d42:	f043 0210 	orr.w	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	f043 0201 	orr.w	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e055      	b.n	8001e06 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe ff1a 	bl	8000b98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001d64:	482b      	ldr	r0, [pc, #172]	; (8001e14 <ADC_Enable+0x100>)
 8001d66:	f7fe fda9 	bl	80008bc <LL_ADC_GetCommonPathInternalCh>
 8001d6a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001d6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d74:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <ADC_Enable+0x104>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	4a28      	ldr	r2, [pc, #160]	; (8001e1c <ADC_Enable+0x108>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d8e:	e002      	b.n	8001d96 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f9      	bne.n	8001d90 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d9c:	f7fe fd5c 	bl	8000858 <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001da2:	e028      	b.n	8001df6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ff1d 	bl	8000be8 <LL_ADC_IsEnabled>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d104      	bne.n	8001dbe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe feed 	bl	8000b98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dbe:	f7fe fd4b 	bl	8000858 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d914      	bls.n	8001df6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d00d      	beq.n	8001df6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	f043 0210 	orr.w	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e007      	b.n	8001e06 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d1cf      	bne.n	8001da4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	8000003f 	.word	0x8000003f
 8001e14:	50040300 	.word	0x50040300
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	053e2d63 	.word	0x053e2d63

08001e20 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe feee 	bl	8000c0e <LL_ADC_IsDisableOngoing>
 8001e32:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fed5 	bl	8000be8 <LL_ADC_IsEnabled>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d047      	beq.n	8001ed4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d144      	bne.n	8001ed4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030d 	and.w	r3, r3, #13
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d10c      	bne.n	8001e72 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe feaf 	bl	8000bc0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2203      	movs	r2, #3
 8001e68:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e6a:	f7fe fcf5 	bl	8000858 <HAL_GetTick>
 8001e6e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e70:	e029      	b.n	8001ec6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	f043 0201 	orr.w	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e023      	b.n	8001ed6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e8e:	f7fe fce3 	bl	8000858 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d914      	bls.n	8001ec6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00d      	beq.n	8001ec6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eae:	f043 0210 	orr.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e007      	b.n	8001ed6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1dc      	bne.n	8001e8e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d14b      	bne.n	8001f90 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d021      	beq.n	8001f56 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fd33 	bl	8000982 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d032      	beq.n	8001f88 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d12b      	bne.n	8001f88 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d11f      	bne.n	8001f88 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
 8001f54:	e018      	b.n	8001f88 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d111      	bne.n	8001f88 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f7fe f91d 	bl	80001c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f8e:	e00e      	b.n	8001fae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff fabd 	bl	800151c <HAL_ADC_ErrorCallback>
}
 8001fa2:	e004      	b.n	8001fae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7ff fa95 	bl	80014f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	f043 0204 	orr.w	r2, r3, #4
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f7ff fa8f 	bl	800151c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <LL_ADC_IsEnabled>:
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <LL_ADC_IsEnabled+0x18>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <LL_ADC_IsEnabled+0x1a>
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_StartCalibration>:
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800203e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002048:	4313      	orrs	r3, r2
 800204a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	609a      	str	r2, [r3, #8]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_ADC_IsCalibrationOnGoing>:
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800206e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002072:	d101      	bne.n	8002078 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_ADC_REG_IsConversionOngoing>:
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d101      	bne.n	800209e <LL_ADC_REG_IsConversionOngoing+0x18>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_ADCEx_Calibration_Start+0x1c>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e04d      	b.n	8002164 <HAL_ADCEx_Calibration_Start+0xb8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fea5 	bl	8001e20 <ADC_Disable>
 80020d6:	4603      	mov	r3, r0
 80020d8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d136      	bne.n	800214e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020e8:	f023 0302 	bic.w	r3, r3, #2
 80020ec:	f043 0202 	orr.w	r2, r3, #2
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff96 	bl	800202c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002100:	e014      	b.n	800212c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3301      	adds	r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800210e:	d30d      	bcc.n	800212c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	f023 0312 	bic.w	r3, r3, #18
 8002118:	f043 0210 	orr.w	r2, r3, #16
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e01b      	b.n	8002164 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff94 	bl	800205e <LL_ADC_IsCalibrationOnGoing>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e2      	bne.n	8002102 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f023 0303 	bic.w	r3, r3, #3
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
 800214c:	e005      	b.n	800215a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	f043 0210 	orr.w	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b09f      	sub	sp, #124	; 0x7c
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e093      	b.n	8002316 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80021f6:	2300      	movs	r3, #0
 80021f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80021fa:	2300      	movs	r3, #0
 80021fc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a47      	ldr	r2, [pc, #284]	; (8002320 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d102      	bne.n	800220e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002208:	4b46      	ldr	r3, [pc, #280]	; (8002324 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	e001      	b.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e072      	b.n	8002316 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff27 	bl	8002086 <LL_ADC_REG_IsConversionOngoing>
 8002238:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff21 	bl	8002086 <LL_ADC_REG_IsConversionOngoing>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d154      	bne.n	80022f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800224a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800224c:	2b00      	cmp	r3, #0
 800224e:	d151      	bne.n	80022f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002250:	4b35      	ldr	r3, [pc, #212]	; (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002252:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02c      	beq.n	80022b6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800225c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800226e:	035b      	lsls	r3, r3, #13
 8002270:	430b      	orrs	r3, r1
 8002272:	431a      	orrs	r2, r3
 8002274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002276:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002278:	4829      	ldr	r0, [pc, #164]	; (8002320 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800227a:	f7ff fec4 	bl	8002006 <LL_ADC_IsEnabled>
 800227e:	4604      	mov	r4, r0
 8002280:	4828      	ldr	r0, [pc, #160]	; (8002324 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002282:	f7ff fec0 	bl	8002006 <LL_ADC_IsEnabled>
 8002286:	4603      	mov	r3, r0
 8002288:	431c      	orrs	r4, r3
 800228a:	4828      	ldr	r0, [pc, #160]	; (800232c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800228c:	f7ff febb 	bl	8002006 <LL_ADC_IsEnabled>
 8002290:	4603      	mov	r3, r0
 8002292:	4323      	orrs	r3, r4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d137      	bne.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022a0:	f023 030f 	bic.w	r3, r3, #15
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	6811      	ldr	r1, [r2, #0]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	6892      	ldr	r2, [r2, #8]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022b4:	e028      	b.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022c2:	4817      	ldr	r0, [pc, #92]	; (8002320 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022c4:	f7ff fe9f 	bl	8002006 <LL_ADC_IsEnabled>
 80022c8:	4604      	mov	r4, r0
 80022ca:	4816      	ldr	r0, [pc, #88]	; (8002324 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022cc:	f7ff fe9b 	bl	8002006 <LL_ADC_IsEnabled>
 80022d0:	4603      	mov	r3, r0
 80022d2:	431c      	orrs	r4, r3
 80022d4:	4815      	ldr	r0, [pc, #84]	; (800232c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022d6:	f7ff fe96 	bl	8002006 <LL_ADC_IsEnabled>
 80022da:	4603      	mov	r3, r0
 80022dc:	4323      	orrs	r3, r4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d112      	bne.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022ea:	f023 030f 	bic.w	r3, r3, #15
 80022ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022f0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022f2:	e009      	b.n	8002308 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	f043 0220 	orr.w	r2, r3, #32
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002306:	e000      	b.n	800230a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002308:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002312:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002316:	4618      	mov	r0, r3
 8002318:	377c      	adds	r7, #124	; 0x7c
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}
 800231e:	bf00      	nop
 8002320:	50040000 	.word	0x50040000
 8002324:	50040100 	.word	0x50040100
 8002328:	50040300 	.word	0x50040300
 800232c:	50040200 	.word	0x50040200

08002330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800235c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	; (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	; (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	; (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff8e 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff29 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff3e 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff8e 	bl	8002424 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5d 	bl	80023d0 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff31 	bl	8002394 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa2 	bl	800248c <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e098      	b.n	8002698 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b4d      	ldr	r3, [pc, #308]	; (80026a4 <HAL_DMA_Init+0x150>)
 800256e:	429a      	cmp	r2, r3
 8002570:	d80f      	bhi.n	8002592 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <HAL_DMA_Init+0x154>)
 800257a:	4413      	add	r3, r2
 800257c:	4a4b      	ldr	r2, [pc, #300]	; (80026ac <HAL_DMA_Init+0x158>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	009a      	lsls	r2, r3, #2
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a48      	ldr	r2, [pc, #288]	; (80026b0 <HAL_DMA_Init+0x15c>)
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
 8002590:	e00e      	b.n	80025b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <HAL_DMA_Init+0x160>)
 800259a:	4413      	add	r3, r2
 800259c:	4a43      	ldr	r2, [pc, #268]	; (80026ac <HAL_DMA_Init+0x158>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	009a      	lsls	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a42      	ldr	r2, [pc, #264]	; (80026b8 <HAL_DMA_Init+0x164>)
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80025c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800260a:	d039      	beq.n	8002680 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	4a27      	ldr	r2, [pc, #156]	; (80026b0 <HAL_DMA_Init+0x15c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d11a      	bne.n	800264c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <HAL_DMA_Init+0x168>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f003 031c 	and.w	r3, r3, #28
 8002622:	210f      	movs	r1, #15
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	4924      	ldr	r1, [pc, #144]	; (80026bc <HAL_DMA_Init+0x168>)
 800262c:	4013      	ands	r3, r2
 800262e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <HAL_DMA_Init+0x168>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	f003 031c 	and.w	r3, r3, #28
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	491d      	ldr	r1, [pc, #116]	; (80026bc <HAL_DMA_Init+0x168>)
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
 800264a:	e019      	b.n	8002680 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800264c:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HAL_DMA_Init+0x16c>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	f003 031c 	and.w	r3, r3, #28
 8002658:	210f      	movs	r1, #15
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	4917      	ldr	r1, [pc, #92]	; (80026c0 <HAL_DMA_Init+0x16c>)
 8002662:	4013      	ands	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_DMA_Init+0x16c>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f003 031c 	and.w	r3, r3, #28
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	4911      	ldr	r1, [pc, #68]	; (80026c0 <HAL_DMA_Init+0x16c>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40020407 	.word	0x40020407
 80026a8:	bffdfff8 	.word	0xbffdfff8
 80026ac:	cccccccd 	.word	0xcccccccd
 80026b0:	40020000 	.word	0x40020000
 80026b4:	bffdfbf8 	.word	0xbffdfbf8
 80026b8:	40020400 	.word	0x40020400
 80026bc:	400200a8 	.word	0x400200a8
 80026c0:	400204a8 	.word	0x400204a8

080026c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_DMA_Start_IT+0x20>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e04b      	b.n	800277c <HAL_DMA_Start_IT+0xb8>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d13a      	bne.n	800276e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f8e0 	bl	80028e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 020e 	orr.w	r2, r2, #14
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e00f      	b.n	800275c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0204 	bic.w	r2, r2, #4
 800274a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 020a 	orr.w	r2, r2, #10
 800275a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e005      	b.n	800277a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002776:	2302      	movs	r3, #2
 8002778:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800277a:	7dfb      	ldrb	r3, [r7, #23]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f003 031c 	and.w	r3, r3, #28
 80027a4:	2204      	movs	r2, #4
 80027a6:	409a      	lsls	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d026      	beq.n	80027fe <HAL_DMA_IRQHandler+0x7a>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d021      	beq.n	80027fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0204 	bic.w	r2, r2, #4
 80027d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	f003 021c 	and.w	r2, r3, #28
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	2104      	movs	r1, #4
 80027e6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d071      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027fc:	e06c      	b.n	80028d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f003 031c 	and.w	r3, r3, #28
 8002806:	2202      	movs	r2, #2
 8002808:	409a      	lsls	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d02e      	beq.n	8002870 <HAL_DMA_IRQHandler+0xec>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d029      	beq.n	8002870 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10b      	bne.n	8002842 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 020a 	bic.w	r2, r2, #10
 8002838:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f003 021c 	and.w	r2, r3, #28
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2102      	movs	r1, #2
 8002850:	fa01 f202 	lsl.w	r2, r1, r2
 8002854:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d038      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800286e:	e033      	b.n	80028d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f003 031c 	and.w	r3, r3, #28
 8002878:	2208      	movs	r2, #8
 800287a:	409a      	lsls	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d02a      	beq.n	80028da <HAL_DMA_IRQHandler+0x156>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d025      	beq.n	80028da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 020e 	bic.w	r2, r2, #14
 800289c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f003 021c 	and.w	r2, r3, #28
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2101      	movs	r1, #1
 80028ac:	fa01 f202 	lsl.w	r2, r1, r2
 80028b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d004      	beq.n	80028da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
}
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f003 021c 	and.w	r2, r3, #28
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	2101      	movs	r1, #1
 80028fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002902:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b10      	cmp	r3, #16
 8002912:	d108      	bne.n	8002926 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002924:	e007      	b.n	8002936 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	60da      	str	r2, [r3, #12]
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002952:	e17f      	b.n	8002c54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	2101      	movs	r1, #1
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	4013      	ands	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8171 	beq.w	8002c4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d005      	beq.n	8002984 <HAL_GPIO_Init+0x40>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d130      	bne.n	80029e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ba:	2201      	movs	r2, #1
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	f003 0201 	and.w	r2, r3, #1
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d118      	bne.n	8002a24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80029f8:	2201      	movs	r2, #1
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	08db      	lsrs	r3, r3, #3
 8002a0e:	f003 0201 	and.w	r2, r3, #1
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d017      	beq.n	8002a60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d123      	bne.n	8002ab4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	08da      	lsrs	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3208      	adds	r2, #8
 8002a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	220f      	movs	r2, #15
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	08da      	lsrs	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3208      	adds	r2, #8
 8002aae:	6939      	ldr	r1, [r7, #16]
 8002ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0203 	and.w	r2, r3, #3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80ac 	beq.w	8002c4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af6:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <HAL_GPIO_Init+0x330>)
 8002af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afa:	4a5e      	ldr	r2, [pc, #376]	; (8002c74 <HAL_GPIO_Init+0x330>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6613      	str	r3, [r2, #96]	; 0x60
 8002b02:	4b5c      	ldr	r3, [pc, #368]	; (8002c74 <HAL_GPIO_Init+0x330>)
 8002b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b0e:	4a5a      	ldr	r2, [pc, #360]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	3302      	adds	r3, #2
 8002b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	220f      	movs	r2, #15
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b38:	d025      	beq.n	8002b86 <HAL_GPIO_Init+0x242>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4f      	ldr	r2, [pc, #316]	; (8002c7c <HAL_GPIO_Init+0x338>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d01f      	beq.n	8002b82 <HAL_GPIO_Init+0x23e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4e      	ldr	r2, [pc, #312]	; (8002c80 <HAL_GPIO_Init+0x33c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d019      	beq.n	8002b7e <HAL_GPIO_Init+0x23a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4d      	ldr	r2, [pc, #308]	; (8002c84 <HAL_GPIO_Init+0x340>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_GPIO_Init+0x236>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4c      	ldr	r2, [pc, #304]	; (8002c88 <HAL_GPIO_Init+0x344>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00d      	beq.n	8002b76 <HAL_GPIO_Init+0x232>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4b      	ldr	r2, [pc, #300]	; (8002c8c <HAL_GPIO_Init+0x348>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d007      	beq.n	8002b72 <HAL_GPIO_Init+0x22e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4a      	ldr	r2, [pc, #296]	; (8002c90 <HAL_GPIO_Init+0x34c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d101      	bne.n	8002b6e <HAL_GPIO_Init+0x22a>
 8002b6a:	2306      	movs	r3, #6
 8002b6c:	e00c      	b.n	8002b88 <HAL_GPIO_Init+0x244>
 8002b6e:	2307      	movs	r3, #7
 8002b70:	e00a      	b.n	8002b88 <HAL_GPIO_Init+0x244>
 8002b72:	2305      	movs	r3, #5
 8002b74:	e008      	b.n	8002b88 <HAL_GPIO_Init+0x244>
 8002b76:	2304      	movs	r3, #4
 8002b78:	e006      	b.n	8002b88 <HAL_GPIO_Init+0x244>
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e004      	b.n	8002b88 <HAL_GPIO_Init+0x244>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e002      	b.n	8002b88 <HAL_GPIO_Init+0x244>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_GPIO_Init+0x244>
 8002b86:	2300      	movs	r3, #0
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	f002 0203 	and.w	r2, r2, #3
 8002b8e:	0092      	lsls	r2, r2, #2
 8002b90:	4093      	lsls	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b98:	4937      	ldr	r1, [pc, #220]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bca:	4a32      	ldr	r2, [pc, #200]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bd0:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bf4:	4a27      	ldr	r2, [pc, #156]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	43db      	mvns	r3, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c1e:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c24:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c48:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3301      	adds	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f47f ae78 	bne.w	8002954 <HAL_GPIO_Init+0x10>
  }
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	48000400 	.word	0x48000400
 8002c80:	48000800 	.word	0x48000800
 8002c84:	48000c00 	.word	0x48000c00
 8002c88:	48001000 	.word	0x48001000
 8002c8c:	48001400 	.word	0x48001400
 8002c90:	48001800 	.word	0x48001800
 8002c94:	40010400 	.word	0x40010400

08002c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	807b      	strh	r3, [r7, #2]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca8:	787b      	ldrb	r3, [r7, #1]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cae:	887a      	ldrh	r2, [r7, #2]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cb4:	e002      	b.n	8002cbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40007000 	.word	0x40007000

08002ce4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf2:	d130      	bne.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf4:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d00:	d038      	beq.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2232      	movs	r2, #50	; 0x32
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0c9b      	lsrs	r3, r3, #18
 8002d24:	3301      	adds	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d28:	e002      	b.n	8002d30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3c:	d102      	bne.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f2      	bne.n	8002d2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d50:	d110      	bne.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e00f      	b.n	8002d76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d007      	beq.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d6c:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40007000 	.word	0x40007000
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	431bde83 	.word	0x431bde83

08002d90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e3ca      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da2:	4b97      	ldr	r3, [pc, #604]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dac:	4b94      	ldr	r3, [pc, #592]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80e4 	beq.w	8002f8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_RCC_OscConfig+0x4a>
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b0c      	cmp	r3, #12
 8002dce:	f040 808b 	bne.w	8002ee8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	f040 8087 	bne.w	8002ee8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dda:	4b89      	ldr	r3, [pc, #548]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_RCC_OscConfig+0x62>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e3a2      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	4b82      	ldr	r3, [pc, #520]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_RCC_OscConfig+0x7c>
 8002e02:	4b7f      	ldr	r3, [pc, #508]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0a:	e005      	b.n	8002e18 <HAL_RCC_OscConfig+0x88>
 8002e0c:	4b7c      	ldr	r3, [pc, #496]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d223      	bcs.n	8002e64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fd1d 	bl	8003860 <RCC_SetFlashLatencyFromMSIRange>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e383      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e30:	4b73      	ldr	r3, [pc, #460]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a72      	ldr	r2, [pc, #456]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e36:	f043 0308 	orr.w	r3, r3, #8
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b70      	ldr	r3, [pc, #448]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	496d      	ldr	r1, [pc, #436]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4e:	4b6c      	ldr	r3, [pc, #432]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	4968      	ldr	r1, [pc, #416]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
 8002e62:	e025      	b.n	8002eb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e64:	4b66      	ldr	r3, [pc, #408]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a65      	ldr	r2, [pc, #404]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b63      	ldr	r3, [pc, #396]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4960      	ldr	r1, [pc, #384]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e82:	4b5f      	ldr	r3, [pc, #380]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	495b      	ldr	r1, [pc, #364]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fcdd 	bl	8003860 <RCC_SetFlashLatencyFromMSIRange>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e343      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eb0:	f000 fc4a 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b52      	ldr	r3, [pc, #328]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	4950      	ldr	r1, [pc, #320]	; (8003004 <HAL_RCC_OscConfig+0x274>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ecc:	4a4e      	ldr	r2, [pc, #312]	; (8003008 <HAL_RCC_OscConfig+0x278>)
 8002ece:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ed0:	4b4e      	ldr	r3, [pc, #312]	; (800300c <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fc6f 	bl	80007b8 <HAL_InitTick>
 8002eda:	4603      	mov	r3, r0
 8002edc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d052      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	e327      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d032      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a42      	ldr	r2, [pc, #264]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002efc:	f7fd fcac 	bl	8000858 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f04:	f7fd fca8 	bl	8000858 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e310      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f16:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f22:	4b37      	ldr	r3, [pc, #220]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a36      	ldr	r2, [pc, #216]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f28:	f043 0308 	orr.w	r3, r3, #8
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b34      	ldr	r3, [pc, #208]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4931      	ldr	r1, [pc, #196]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f40:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	492c      	ldr	r1, [pc, #176]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
 8002f54:	e01a      	b.n	8002f8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f56:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a29      	ldr	r2, [pc, #164]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f62:	f7fd fc79 	bl	8000858 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f6a:	f7fd fc75 	bl	8000858 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e2dd      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f7c:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x1da>
 8002f88:	e000      	b.n	8002f8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d074      	beq.n	8003082 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d005      	beq.n	8002faa <HAL_RCC_OscConfig+0x21a>
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	d10e      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d10b      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d064      	beq.n	8003080 <HAL_RCC_OscConfig+0x2f0>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d160      	bne.n	8003080 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e2ba      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x24a>
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e026      	b.n	8003028 <HAL_RCC_OscConfig+0x298>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe2:	d115      	bne.n	8003010 <HAL_RCC_OscConfig+0x280>
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a05      	ldr	r2, [pc, #20]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a02      	ldr	r2, [pc, #8]	; (8003000 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	e014      	b.n	8003028 <HAL_RCC_OscConfig+0x298>
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
 8003004:	08004308 	.word	0x08004308
 8003008:	20000000 	.word	0x20000000
 800300c:	20000004 	.word	0x20000004
 8003010:	4ba0      	ldr	r3, [pc, #640]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a9f      	ldr	r2, [pc, #636]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b9d      	ldr	r3, [pc, #628]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a9c      	ldr	r2, [pc, #624]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fd fc12 	bl	8000858 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fd fc0e 	bl	8000858 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e276      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304a:	4b92      	ldr	r3, [pc, #584]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x2a8>
 8003056:	e014      	b.n	8003082 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fd fbfe 	bl	8000858 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003060:	f7fd fbfa 	bl	8000858 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e262      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003072:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x2d0>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d060      	beq.n	8003150 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_OscConfig+0x310>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d119      	bne.n	80030ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d116      	bne.n	80030ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a0:	4b7c      	ldr	r3, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_OscConfig+0x328>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e23f      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b8:	4b76      	ldr	r3, [pc, #472]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	4973      	ldr	r1, [pc, #460]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030cc:	e040      	b.n	8003150 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d023      	beq.n	800311e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d6:	4b6f      	ldr	r3, [pc, #444]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6e      	ldr	r2, [pc, #440]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fd fbb9 	bl	8000858 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ea:	f7fd fbb5 	bl	8000858 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e21d      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fc:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003108:	4b62      	ldr	r3, [pc, #392]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	495f      	ldr	r1, [pc, #380]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
 800311c:	e018      	b.n	8003150 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311e:	4b5d      	ldr	r3, [pc, #372]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a5c      	ldr	r2, [pc, #368]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fd fb95 	bl	8000858 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003132:	f7fd fb91 	bl	8000858 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1f9      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f0      	bne.n	8003132 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d03c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01c      	beq.n	800319e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003164:	4b4b      	ldr	r3, [pc, #300]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316a:	4a4a      	ldr	r2, [pc, #296]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fd fb70 	bl	8000858 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317c:	f7fd fb6c 	bl	8000858 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1d4      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318e:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ef      	beq.n	800317c <HAL_RCC_OscConfig+0x3ec>
 800319c:	e01b      	b.n	80031d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319e:	4b3d      	ldr	r3, [pc, #244]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a4:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fd fb53 	bl	8000858 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fd fb4f 	bl	8000858 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1b7      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c8:	4b32      	ldr	r3, [pc, #200]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ef      	bne.n	80031b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80a6 	beq.w	8003330 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e4:	2300      	movs	r3, #0
 80031e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031e8:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10d      	bne.n	8003210 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	4a26      	ldr	r2, [pc, #152]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320c:	2301      	movs	r3, #1
 800320e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003210:	4b21      	ldr	r3, [pc, #132]	; (8003298 <HAL_RCC_OscConfig+0x508>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d118      	bne.n	800324e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <HAL_RCC_OscConfig+0x508>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_RCC_OscConfig+0x508>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003228:	f7fd fb16 	bl	8000858 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fd fb12 	bl	8000858 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e17a      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_RCC_OscConfig+0x508>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_RCC_OscConfig+0x4d8>
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325c:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003266:	e029      	b.n	80032bc <HAL_RCC_OscConfig+0x52c>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b05      	cmp	r3, #5
 800326e:	d115      	bne.n	800329c <HAL_RCC_OscConfig+0x50c>
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003280:	4b04      	ldr	r3, [pc, #16]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	4a03      	ldr	r2, [pc, #12]	; (8003294 <HAL_RCC_OscConfig+0x504>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003290:	e014      	b.n	80032bc <HAL_RCC_OscConfig+0x52c>
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
 800329c:	4b9c      	ldr	r3, [pc, #624]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	4a9b      	ldr	r2, [pc, #620]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032ac:	4b98      	ldr	r3, [pc, #608]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b2:	4a97      	ldr	r2, [pc, #604]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80032b4:	f023 0304 	bic.w	r3, r3, #4
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d016      	beq.n	80032f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fd fac8 	bl	8000858 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fd fac4 	bl	8000858 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e12a      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e2:	4b8b      	ldr	r3, [pc, #556]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ed      	beq.n	80032cc <HAL_RCC_OscConfig+0x53c>
 80032f0:	e015      	b.n	800331e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7fd fab1 	bl	8000858 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032f8:	e00a      	b.n	8003310 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7fd faad 	bl	8000858 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f241 3288 	movw	r2, #5000	; 0x1388
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e113      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003310:	4b7f      	ldr	r3, [pc, #508]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ed      	bne.n	80032fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003324:	4b7a      	ldr	r3, [pc, #488]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003328:	4a79      	ldr	r2, [pc, #484]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 800332a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80fe 	beq.w	8003536 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	2b02      	cmp	r3, #2
 8003340:	f040 80d0 	bne.w	80034e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003344:	4b72      	ldr	r3, [pc, #456]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0203 	and.w	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	429a      	cmp	r2, r3
 8003356:	d130      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	3b01      	subs	r3, #1
 8003364:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d127      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003374:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d11f      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003384:	2a07      	cmp	r2, #7
 8003386:	bf14      	ite	ne
 8003388:	2201      	movne	r2, #1
 800338a:	2200      	moveq	r2, #0
 800338c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338e:	4293      	cmp	r3, r2
 8003390:	d113      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	3b01      	subs	r3, #1
 80033a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d109      	bne.n	80033ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	3b01      	subs	r3, #1
 80033b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d06e      	beq.n	8003498 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d069      	beq.n	8003494 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033c0:	4b53      	ldr	r3, [pc, #332]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d105      	bne.n	80033d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033cc:	4b50      	ldr	r3, [pc, #320]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0ad      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033dc:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a4b      	ldr	r2, [pc, #300]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80033e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033e8:	f7fd fa36 	bl	8000858 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fd fa32 	bl	8000858 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e09a      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003402:	4b43      	ldr	r3, [pc, #268]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	4b40      	ldr	r3, [pc, #256]	; (8003514 <HAL_RCC_OscConfig+0x784>)
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800341e:	3a01      	subs	r2, #1
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	4311      	orrs	r1, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003428:	0212      	lsls	r2, r2, #8
 800342a:	4311      	orrs	r1, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003430:	0852      	lsrs	r2, r2, #1
 8003432:	3a01      	subs	r2, #1
 8003434:	0552      	lsls	r2, r2, #21
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800343c:	0852      	lsrs	r2, r2, #1
 800343e:	3a01      	subs	r2, #1
 8003440:	0652      	lsls	r2, r2, #25
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003448:	0912      	lsrs	r2, r2, #4
 800344a:	0452      	lsls	r2, r2, #17
 800344c:	430a      	orrs	r2, r1
 800344e:	4930      	ldr	r1, [pc, #192]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003450:	4313      	orrs	r3, r2
 8003452:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003454:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a2d      	ldr	r2, [pc, #180]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 800345a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003460:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a2a      	ldr	r2, [pc, #168]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800346c:	f7fd f9f4 	bl	8000858 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7fd f9f0 	bl	8000858 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e058      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003486:	4b22      	ldr	r3, [pc, #136]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003492:	e050      	b.n	8003536 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e04f      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d148      	bne.n	8003536 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a19      	ldr	r2, [pc, #100]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a16      	ldr	r2, [pc, #88]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034bc:	f7fd f9cc 	bl	8000858 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fd f9c8 	bl	8000858 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e030      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x734>
 80034e2:	e028      	b.n	8003536 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d023      	beq.n	8003532 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a08      	ldr	r2, [pc, #32]	; (8003510 <HAL_RCC_OscConfig+0x780>)
 80034f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f6:	f7fd f9af 	bl	8000858 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fc:	e00c      	b.n	8003518 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fe:	f7fd f9ab 	bl	8000858 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d905      	bls.n	8003518 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e013      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
 8003510:	40021000 	.word	0x40021000
 8003514:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_OscConfig+0x7b0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ec      	bne.n	80034fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_OscConfig+0x7b0>)
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	4905      	ldr	r1, [pc, #20]	; (8003540 <HAL_RCC_OscConfig+0x7b0>)
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCC_OscConfig+0x7b4>)
 800352c:	4013      	ands	r3, r2
 800352e:	60cb      	str	r3, [r1, #12]
 8003530:	e001      	b.n	8003536 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	feeefffc 	.word	0xfeeefffc

08003548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0e7      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b75      	ldr	r3, [pc, #468]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d910      	bls.n	800358c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b72      	ldr	r3, [pc, #456]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 0207 	bic.w	r2, r3, #7
 8003572:	4970      	ldr	r1, [pc, #448]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b6e      	ldr	r3, [pc, #440]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0cf      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d010      	beq.n	80035ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	4b66      	ldr	r3, [pc, #408]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d908      	bls.n	80035ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4960      	ldr	r1, [pc, #384]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d04c      	beq.n	8003660 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ce:	4b5a      	ldr	r3, [pc, #360]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d121      	bne.n	800361e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0a6      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e6:	4b54      	ldr	r3, [pc, #336]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d115      	bne.n	800361e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e09a      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035fe:	4b4e      	ldr	r3, [pc, #312]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e08e      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800360e:	4b4a      	ldr	r3, [pc, #296]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e086      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b46      	ldr	r3, [pc, #280]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4943      	ldr	r1, [pc, #268]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003630:	f7fd f912 	bl	8000858 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fd f90e 	bl	8000858 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e06e      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d010      	beq.n	800368e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003678:	429a      	cmp	r2, r3
 800367a:	d208      	bcs.n	800368e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367c:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	492b      	ldr	r1, [pc, #172]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800368e:	4b29      	ldr	r3, [pc, #164]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d210      	bcs.n	80036be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 0207 	bic.w	r2, r3, #7
 80036a4:	4923      	ldr	r1, [pc, #140]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ac:	4b21      	ldr	r3, [pc, #132]	; (8003734 <HAL_RCC_ClockConfig+0x1ec>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d001      	beq.n	80036be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e036      	b.n	800372c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4918      	ldr	r1, [pc, #96]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d009      	beq.n	80036fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4910      	ldr	r1, [pc, #64]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036fc:	f000 f824 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8003700:	4602      	mov	r2, r0
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	091b      	lsrs	r3, r3, #4
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	490b      	ldr	r1, [pc, #44]	; (800373c <HAL_RCC_ClockConfig+0x1f4>)
 800370e:	5ccb      	ldrb	r3, [r1, r3]
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
 8003718:	4a09      	ldr	r2, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x1f8>)
 800371a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_RCC_ClockConfig+0x1fc>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7fd f849 	bl	80007b8 <HAL_InitTick>
 8003726:	4603      	mov	r3, r0
 8003728:	72fb      	strb	r3, [r7, #11]

  return status;
 800372a:	7afb      	ldrb	r3, [r7, #11]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40022000 	.word	0x40022000
 8003738:	40021000 	.word	0x40021000
 800373c:	08004308 	.word	0x08004308
 8003740:	20000000 	.word	0x20000000
 8003744:	20000004 	.word	0x20000004

08003748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003756:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003760:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x34>
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d121      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d11e      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800377c:	4b34      	ldr	r3, [pc, #208]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d107      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003788:	4b31      	ldr	r3, [pc, #196]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e005      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003798:	4b2d      	ldr	r3, [pc, #180]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037a4:	4a2b      	ldr	r2, [pc, #172]	; (8003854 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <HAL_RCC_GetSysClockFreq+0x110>)
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	e004      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037cc:	4b23      	ldr	r3, [pc, #140]	; (800385c <HAL_RCC_GetSysClockFreq+0x114>)
 80037ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d134      	bne.n	8003840 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037d6:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d003      	beq.n	80037ee <HAL_RCC_GetSysClockFreq+0xa6>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d003      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0xac>
 80037ec:	e005      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037ee:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <HAL_RCC_GetSysClockFreq+0x110>)
 80037f0:	617b      	str	r3, [r7, #20]
      break;
 80037f2:	e005      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_RCC_GetSysClockFreq+0x114>)
 80037f6:	617b      	str	r3, [r7, #20]
      break;
 80037f8:	e002      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	617b      	str	r3, [r7, #20]
      break;
 80037fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003800:	4b13      	ldr	r3, [pc, #76]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	3301      	adds	r3, #1
 800380c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	fb03 f202 	mul.w	r2, r3, r2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	0e5b      	lsrs	r3, r3, #25
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	3301      	adds	r3, #1
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003840:	69bb      	ldr	r3, [r7, #24]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	; 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000
 8003854:	08004318 	.word	0x08004318
 8003858:	00f42400 	.word	0x00f42400
 800385c:	007a1200 	.word	0x007a1200

08003860 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800386c:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003878:	f7ff fa26 	bl	8002cc8 <HAL_PWREx_GetVoltageRange>
 800387c:	6178      	str	r0, [r7, #20]
 800387e:	e014      	b.n	80038aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003880:	4b25      	ldr	r3, [pc, #148]	; (8003918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	4a24      	ldr	r2, [pc, #144]	; (8003918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388a:	6593      	str	r3, [r2, #88]	; 0x58
 800388c:	4b22      	ldr	r3, [pc, #136]	; (8003918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003898:	f7ff fa16 	bl	8002cc8 <HAL_PWREx_GetVoltageRange>
 800389c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800389e:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	4a1d      	ldr	r2, [pc, #116]	; (8003918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b0:	d10b      	bne.n	80038ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b80      	cmp	r3, #128	; 0x80
 80038b6:	d919      	bls.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2ba0      	cmp	r3, #160	; 0xa0
 80038bc:	d902      	bls.n	80038c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038be:	2302      	movs	r3, #2
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	e013      	b.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038c4:	2301      	movs	r3, #1
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	e010      	b.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d902      	bls.n	80038d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038d0:	2303      	movs	r3, #3
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e00a      	b.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d102      	bne.n	80038e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038dc:	2302      	movs	r3, #2
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	e004      	b.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b70      	cmp	r3, #112	; 0x70
 80038e6:	d101      	bne.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038e8:	2301      	movs	r3, #1
 80038ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038ec:	4b0b      	ldr	r3, [pc, #44]	; (800391c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f023 0207 	bic.w	r2, r3, #7
 80038f4:	4909      	ldr	r1, [pc, #36]	; (800391c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	429a      	cmp	r2, r3
 8003908:	d001      	beq.n	800390e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000
 800391c:	40022000 	.word	0x40022000

08003920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003928:	2300      	movs	r3, #0
 800392a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800392c:	2300      	movs	r3, #0
 800392e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003938:	2b00      	cmp	r3, #0
 800393a:	d041      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003940:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003944:	d02a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003946:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800394a:	d824      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800394c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003950:	d008      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003952:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003956:	d81e      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800395c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003960:	d010      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003962:	e018      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003964:	4b86      	ldr	r3, [pc, #536]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a85      	ldr	r2, [pc, #532]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003970:	e015      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fabb 	bl	8003ef4 <RCCEx_PLLSAI1_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003982:	e00c      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3320      	adds	r3, #32
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fba6 	bl	80040dc <RCCEx_PLLSAI2_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003994:	e003      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	74fb      	strb	r3, [r7, #19]
      break;
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800399c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039a4:	4b76      	ldr	r3, [pc, #472]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b2:	4973      	ldr	r1, [pc, #460]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039ba:	e001      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d041      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039d4:	d02a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80039d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039da:	d824      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039e0:	d008      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039e6:	d81e      	bhi.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f0:	d010      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039f2:	e018      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039f4:	4b62      	ldr	r3, [pc, #392]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4a61      	ldr	r2, [pc, #388]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a00:	e015      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fa73 	bl	8003ef4 <RCCEx_PLLSAI1_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a12:	e00c      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3320      	adds	r3, #32
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fb5e 	bl	80040dc <RCCEx_PLLSAI2_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a24:	e003      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	74fb      	strb	r3, [r7, #19]
      break;
 8003a2a:	e000      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a2e:	7cfb      	ldrb	r3, [r7, #19]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a34:	4b52      	ldr	r3, [pc, #328]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a42:	494f      	ldr	r1, [pc, #316]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a4a:	e001      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a0 	beq.w	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a62:	4b47      	ldr	r3, [pc, #284]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a72:	2300      	movs	r3, #0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00d      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a78:	4b41      	ldr	r3, [pc, #260]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7c:	4a40      	ldr	r2, [pc, #256]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a82:	6593      	str	r3, [r2, #88]	; 0x58
 8003a84:	4b3e      	ldr	r3, [pc, #248]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a90:	2301      	movs	r3, #1
 8003a92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a94:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a3a      	ldr	r2, [pc, #232]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aa0:	f7fc feda 	bl	8000858 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aa6:	e009      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa8:	f7fc fed6 	bl	8000858 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d902      	bls.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	74fb      	strb	r3, [r7, #19]
        break;
 8003aba:	e005      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003abc:	4b31      	ldr	r3, [pc, #196]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ef      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ac8:	7cfb      	ldrb	r3, [r7, #19]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d15c      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ace:	4b2c      	ldr	r3, [pc, #176]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01f      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d019      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aec:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003af8:	4b21      	ldr	r3, [pc, #132]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	4a20      	ldr	r2, [pc, #128]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b18:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d016      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fc fe95 	bl	8000858 <HAL_GetTick>
 8003b2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b30:	e00b      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fc fe91 	bl	8000858 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d902      	bls.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	74fb      	strb	r3, [r7, #19]
            break;
 8003b48:	e006      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ec      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6e:	4904      	ldr	r1, [pc, #16]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b76:	e009      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b78:	7cfb      	ldrb	r3, [r7, #19]
 8003b7a:	74bb      	strb	r3, [r7, #18]
 8003b7c:	e006      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b88:	7cfb      	ldrb	r3, [r7, #19]
 8003b8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b8c:	7c7b      	ldrb	r3, [r7, #17]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d105      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b92:	4b9e      	ldr	r3, [pc, #632]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	4a9d      	ldr	r2, [pc, #628]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003baa:	4b98      	ldr	r3, [pc, #608]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	f023 0203 	bic.w	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	4994      	ldr	r1, [pc, #592]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bcc:	4b8f      	ldr	r3, [pc, #572]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	f023 020c 	bic.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	498c      	ldr	r1, [pc, #560]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bee:	4b87      	ldr	r3, [pc, #540]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	4983      	ldr	r1, [pc, #524]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c10:	4b7e      	ldr	r3, [pc, #504]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	497b      	ldr	r1, [pc, #492]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c32:	4b76      	ldr	r3, [pc, #472]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c40:	4972      	ldr	r1, [pc, #456]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c54:	4b6d      	ldr	r3, [pc, #436]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	496a      	ldr	r1, [pc, #424]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c76:	4b65      	ldr	r3, [pc, #404]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	4961      	ldr	r1, [pc, #388]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c98:	4b5c      	ldr	r3, [pc, #368]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca6:	4959      	ldr	r1, [pc, #356]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cba:	4b54      	ldr	r3, [pc, #336]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc8:	4950      	ldr	r1, [pc, #320]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cdc:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	4948      	ldr	r1, [pc, #288]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cfe:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	493f      	ldr	r1, [pc, #252]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d028      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d20:	4b3a      	ldr	r3, [pc, #232]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d2e:	4937      	ldr	r1, [pc, #220]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d40:	4b32      	ldr	r3, [pc, #200]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a31      	ldr	r2, [pc, #196]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d4a:	60d3      	str	r3, [r2, #12]
 8003d4c:	e011      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d56:	d10c      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f8c8 	bl	8003ef4 <RCCEx_PLLSAI1_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d028      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d7e:	4b23      	ldr	r3, [pc, #140]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	491f      	ldr	r1, [pc, #124]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d9c:	d106      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	4a1a      	ldr	r2, [pc, #104]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003da8:	60d3      	str	r3, [r2, #12]
 8003daa:	e011      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 f899 	bl	8003ef4 <RCCEx_PLLSAI1_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dc6:	7cfb      	ldrb	r3, [r7, #19]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003dcc:	7cfb      	ldrb	r3, [r7, #19]
 8003dce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d02b      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dea:	4908      	ldr	r1, [pc, #32]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dfa:	d109      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4a02      	ldr	r2, [pc, #8]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e06:	60d3      	str	r3, [r2, #12]
 8003e08:	e014      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	2101      	movs	r1, #1
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 f867 	bl	8003ef4 <RCCEx_PLLSAI1_Config>
 8003e26:	4603      	mov	r3, r0
 8003e28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e2a:	7cfb      	ldrb	r3, [r7, #19]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d02f      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e40:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e4e:	4928      	ldr	r1, [pc, #160]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e5e:	d10d      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	2102      	movs	r1, #2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f844 	bl	8003ef4 <RCCEx_PLLSAI1_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d014      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	74bb      	strb	r3, [r7, #18]
 8003e7a:	e011      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3320      	adds	r3, #32
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f925 	bl	80040dc <RCCEx_PLLSAI2_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e96:	7cfb      	ldrb	r3, [r7, #19]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eba:	490d      	ldr	r1, [pc, #52]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ede:	4904      	ldr	r1, [pc, #16]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ee6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f02:	4b75      	ldr	r3, [pc, #468]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d018      	beq.n	8003f40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f0e:	4b72      	ldr	r3, [pc, #456]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f003 0203 	and.w	r2, r3, #3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d10d      	bne.n	8003f3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
       ||
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f26:	4b6c      	ldr	r3, [pc, #432]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
       ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d047      	beq.n	8003fca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	73fb      	strb	r3, [r7, #15]
 8003f3e:	e044      	b.n	8003fca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d018      	beq.n	8003f7a <RCCEx_PLLSAI1_Config+0x86>
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d825      	bhi.n	8003f98 <RCCEx_PLLSAI1_Config+0xa4>
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d002      	beq.n	8003f56 <RCCEx_PLLSAI1_Config+0x62>
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d009      	beq.n	8003f68 <RCCEx_PLLSAI1_Config+0x74>
 8003f54:	e020      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f56:	4b60      	ldr	r3, [pc, #384]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d11d      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f66:	e01a      	b.n	8003f9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f68:	4b5b      	ldr	r3, [pc, #364]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d116      	bne.n	8003fa2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f78:	e013      	b.n	8003fa2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f7a:	4b57      	ldr	r3, [pc, #348]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10f      	bne.n	8003fa6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f86:	4b54      	ldr	r3, [pc, #336]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f96:	e006      	b.n	8003fa6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f9c:	e004      	b.n	8003fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e002      	b.n	8003fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10d      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fae:	4b4a      	ldr	r3, [pc, #296]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	4944      	ldr	r1, [pc, #272]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d17d      	bne.n	80040cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fd0:	4b41      	ldr	r3, [pc, #260]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a40      	ldr	r2, [pc, #256]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fdc:	f7fc fc3c 	bl	8000858 <HAL_GetTick>
 8003fe0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fe2:	e009      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fe4:	f7fc fc38 	bl	8000858 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d902      	bls.n	8003ff8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ff6:	e005      	b.n	8004004 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ff8:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1ef      	bne.n	8003fe4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d160      	bne.n	80040cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d111      	bne.n	8004034 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004010:	4b31      	ldr	r3, [pc, #196]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6892      	ldr	r2, [r2, #8]
 8004020:	0211      	lsls	r1, r2, #8
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68d2      	ldr	r2, [r2, #12]
 8004026:	0912      	lsrs	r2, r2, #4
 8004028:	0452      	lsls	r2, r2, #17
 800402a:	430a      	orrs	r2, r1
 800402c:	492a      	ldr	r1, [pc, #168]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402e:	4313      	orrs	r3, r2
 8004030:	610b      	str	r3, [r1, #16]
 8004032:	e027      	b.n	8004084 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d112      	bne.n	8004060 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800403a:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004042:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6892      	ldr	r2, [r2, #8]
 800404a:	0211      	lsls	r1, r2, #8
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6912      	ldr	r2, [r2, #16]
 8004050:	0852      	lsrs	r2, r2, #1
 8004052:	3a01      	subs	r2, #1
 8004054:	0552      	lsls	r2, r2, #21
 8004056:	430a      	orrs	r2, r1
 8004058:	491f      	ldr	r1, [pc, #124]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405a:	4313      	orrs	r3, r2
 800405c:	610b      	str	r3, [r1, #16]
 800405e:	e011      	b.n	8004084 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004060:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004068:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6892      	ldr	r2, [r2, #8]
 8004070:	0211      	lsls	r1, r2, #8
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6952      	ldr	r2, [r2, #20]
 8004076:	0852      	lsrs	r2, r2, #1
 8004078:	3a01      	subs	r2, #1
 800407a:	0652      	lsls	r2, r2, #25
 800407c:	430a      	orrs	r2, r1
 800407e:	4916      	ldr	r1, [pc, #88]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004084:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800408e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fc fbe2 	bl	8000858 <HAL_GetTick>
 8004094:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004096:	e009      	b.n	80040ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004098:	f7fc fbde 	bl	8000858 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d902      	bls.n	80040ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	73fb      	strb	r3, [r7, #15]
          break;
 80040aa:	e005      	b.n	80040b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0ef      	beq.n	8004098 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	4904      	ldr	r1, [pc, #16]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000

080040dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ea:	4b6a      	ldr	r3, [pc, #424]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d018      	beq.n	8004128 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040f6:	4b67      	ldr	r3, [pc, #412]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0203 	and.w	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d10d      	bne.n	8004122 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
       ||
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800410e:	4b61      	ldr	r3, [pc, #388]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
       ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d047      	beq.n	80041b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	73fb      	strb	r3, [r7, #15]
 8004126:	e044      	b.n	80041b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b03      	cmp	r3, #3
 800412e:	d018      	beq.n	8004162 <RCCEx_PLLSAI2_Config+0x86>
 8004130:	2b03      	cmp	r3, #3
 8004132:	d825      	bhi.n	8004180 <RCCEx_PLLSAI2_Config+0xa4>
 8004134:	2b01      	cmp	r3, #1
 8004136:	d002      	beq.n	800413e <RCCEx_PLLSAI2_Config+0x62>
 8004138:	2b02      	cmp	r3, #2
 800413a:	d009      	beq.n	8004150 <RCCEx_PLLSAI2_Config+0x74>
 800413c:	e020      	b.n	8004180 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800413e:	4b55      	ldr	r3, [pc, #340]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d11d      	bne.n	8004186 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800414e:	e01a      	b.n	8004186 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004150:	4b50      	ldr	r3, [pc, #320]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004158:	2b00      	cmp	r3, #0
 800415a:	d116      	bne.n	800418a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004160:	e013      	b.n	800418a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004162:	4b4c      	ldr	r3, [pc, #304]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10f      	bne.n	800418e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800416e:	4b49      	ldr	r3, [pc, #292]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800417e:	e006      	b.n	800418e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
      break;
 8004184:	e004      	b.n	8004190 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004186:	bf00      	nop
 8004188:	e002      	b.n	8004190 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800418a:	bf00      	nop
 800418c:	e000      	b.n	8004190 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800418e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10d      	bne.n	80041b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004196:	4b3f      	ldr	r3, [pc, #252]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6819      	ldr	r1, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	430b      	orrs	r3, r1
 80041ac:	4939      	ldr	r1, [pc, #228]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d167      	bne.n	8004288 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041b8:	4b36      	ldr	r3, [pc, #216]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a35      	ldr	r2, [pc, #212]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c4:	f7fc fb48 	bl	8000858 <HAL_GetTick>
 80041c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041ca:	e009      	b.n	80041e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041cc:	f7fc fb44 	bl	8000858 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d902      	bls.n	80041e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	73fb      	strb	r3, [r7, #15]
        break;
 80041de:	e005      	b.n	80041ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041e0:	4b2c      	ldr	r3, [pc, #176]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1ef      	bne.n	80041cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d14a      	bne.n	8004288 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d111      	bne.n	800421c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041f8:	4b26      	ldr	r3, [pc, #152]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6892      	ldr	r2, [r2, #8]
 8004208:	0211      	lsls	r1, r2, #8
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68d2      	ldr	r2, [r2, #12]
 800420e:	0912      	lsrs	r2, r2, #4
 8004210:	0452      	lsls	r2, r2, #17
 8004212:	430a      	orrs	r2, r1
 8004214:	491f      	ldr	r1, [pc, #124]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004216:	4313      	orrs	r3, r2
 8004218:	614b      	str	r3, [r1, #20]
 800421a:	e011      	b.n	8004240 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800421c:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004224:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6892      	ldr	r2, [r2, #8]
 800422c:	0211      	lsls	r1, r2, #8
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6912      	ldr	r2, [r2, #16]
 8004232:	0852      	lsrs	r2, r2, #1
 8004234:	3a01      	subs	r2, #1
 8004236:	0652      	lsls	r2, r2, #25
 8004238:	430a      	orrs	r2, r1
 800423a:	4916      	ldr	r1, [pc, #88]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423c:	4313      	orrs	r3, r2
 800423e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004240:	4b14      	ldr	r3, [pc, #80]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a13      	ldr	r2, [pc, #76]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424c:	f7fc fb04 	bl	8000858 <HAL_GetTick>
 8004250:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004252:	e009      	b.n	8004268 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004254:	f7fc fb00 	bl	8000858 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d902      	bls.n	8004268 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	73fb      	strb	r3, [r7, #15]
          break;
 8004266:	e005      	b.n	8004274 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0ef      	beq.n	8004254 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	4904      	ldr	r1, [pc, #16]	; (8004294 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000

08004298 <memset>:
 8004298:	4402      	add	r2, r0
 800429a:	4603      	mov	r3, r0
 800429c:	4293      	cmp	r3, r2
 800429e:	d100      	bne.n	80042a2 <memset+0xa>
 80042a0:	4770      	bx	lr
 80042a2:	f803 1b01 	strb.w	r1, [r3], #1
 80042a6:	e7f9      	b.n	800429c <memset+0x4>

080042a8 <__libc_init_array>:
 80042a8:	b570      	push	{r4, r5, r6, lr}
 80042aa:	4d0d      	ldr	r5, [pc, #52]	; (80042e0 <__libc_init_array+0x38>)
 80042ac:	4c0d      	ldr	r4, [pc, #52]	; (80042e4 <__libc_init_array+0x3c>)
 80042ae:	1b64      	subs	r4, r4, r5
 80042b0:	10a4      	asrs	r4, r4, #2
 80042b2:	2600      	movs	r6, #0
 80042b4:	42a6      	cmp	r6, r4
 80042b6:	d109      	bne.n	80042cc <__libc_init_array+0x24>
 80042b8:	4d0b      	ldr	r5, [pc, #44]	; (80042e8 <__libc_init_array+0x40>)
 80042ba:	4c0c      	ldr	r4, [pc, #48]	; (80042ec <__libc_init_array+0x44>)
 80042bc:	f000 f818 	bl	80042f0 <_init>
 80042c0:	1b64      	subs	r4, r4, r5
 80042c2:	10a4      	asrs	r4, r4, #2
 80042c4:	2600      	movs	r6, #0
 80042c6:	42a6      	cmp	r6, r4
 80042c8:	d105      	bne.n	80042d6 <__libc_init_array+0x2e>
 80042ca:	bd70      	pop	{r4, r5, r6, pc}
 80042cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d0:	4798      	blx	r3
 80042d2:	3601      	adds	r6, #1
 80042d4:	e7ee      	b.n	80042b4 <__libc_init_array+0xc>
 80042d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042da:	4798      	blx	r3
 80042dc:	3601      	adds	r6, #1
 80042de:	e7f2      	b.n	80042c6 <__libc_init_array+0x1e>
 80042e0:	08004348 	.word	0x08004348
 80042e4:	08004348 	.word	0x08004348
 80042e8:	08004348 	.word	0x08004348
 80042ec:	0800434c 	.word	0x0800434c

080042f0 <_init>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	bf00      	nop
 80042f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f6:	bc08      	pop	{r3}
 80042f8:	469e      	mov	lr, r3
 80042fa:	4770      	bx	lr

080042fc <_fini>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	bf00      	nop
 8004300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004302:	bc08      	pop	{r3}
 8004304:	469e      	mov	lr, r3
 8004306:	4770      	bx	lr
